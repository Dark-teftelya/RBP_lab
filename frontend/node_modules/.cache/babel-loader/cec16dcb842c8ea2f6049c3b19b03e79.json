{"ast":null,"code":"import React,{useState}from'react';// Объединенный компонент FilterForm, который включает фильтрацию и отображение таблицы\nconst FilterComp=_ref=>{let{employees,jobTypes,departments}=_ref;const[filteredEmployees,setFilteredEmployees]=useState(employees);const[selectedJobTypes,setSelectedJobTypes]=useState([]);const[selectedDepartments,setSelectedDepartments]=useState([]);// Функция обработки изменений в фильтрах Job Type\nconst handleJobTypeChange=e=>{const{value,checked}=e.target;setSelectedJobTypes(prevState=>checked?[...prevState,value]:prevState.filter(id=>id!==value));};// Функция обработки изменений в фильтрах Department\nconst handleDepartmentChange=e=>{const{value,checked}=e.target;setSelectedDepartments(prevState=>checked?[...prevState,value]:prevState.filter(id=>id!==value));};// Функция отправки фильтров\nconst handleSubmit=e=>{e.preventDefault();const filtered=employees.filter(emp=>{const matchesJobType=selectedJobTypes.length===0||selectedJobTypes.includes(emp.job_type.toString());const matchesDepartment=selectedDepartments.length===0||selectedDepartments.includes(emp.department.toString());return matchesJobType&&matchesDepartment;});setFilteredEmployees(filtered);};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleSubmit},/*#__PURE__*/React.createElement(\"h3\",null,\"Filter Employees\"),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h4\",null,\"Job Types\"),jobTypes.map(jobType=>/*#__PURE__*/React.createElement(\"div\",{key:jobType.id},/*#__PURE__*/React.createElement(\"input\",{type:\"checkbox\",id:`jobType-${jobType.id}`,value:jobType.id,onChange:handleJobTypeChange}),/*#__PURE__*/React.createElement(\"label\",{htmlFor:`jobType-${jobType.id}`},jobType.name)))),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h4\",null,\"Departments\"),departments.map(dept=>/*#__PURE__*/React.createElement(\"div\",{key:dept.id},/*#__PURE__*/React.createElement(\"input\",{type:\"checkbox\",id:`dept-${dept.id}`,value:dept.id,onChange:handleDepartmentChange}),/*#__PURE__*/React.createElement(\"label\",{htmlFor:`dept-${dept.id}`},dept.name)))),/*#__PURE__*/React.createElement(\"button\",{type:\"submit\"},\"Apply Filters\")),/*#__PURE__*/React.createElement(EmployeeTable,{employees:filteredEmployees,jobTypes:jobTypes,departments:departments}));};// Компонент таблицы для отображения сотрудников\nconst EmployeeTable=_ref2=>{let{employees,jobTypes,departments}=_ref2;return/*#__PURE__*/React.createElement(\"table\",{className:\"styled-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"First Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Last Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Salary\"),/*#__PURE__*/React.createElement(\"th\",null,\"Job Type\"),/*#__PURE__*/React.createElement(\"th\",null,\"Department\"))),/*#__PURE__*/React.createElement(\"tbody\",null,employees.map(emp=>{var _jobTypes$find,_departments$find;return/*#__PURE__*/React.createElement(\"tr\",{key:emp.id},/*#__PURE__*/React.createElement(\"td\",null,emp.first_name),/*#__PURE__*/React.createElement(\"td\",null,emp.last_name),/*#__PURE__*/React.createElement(\"td\",null,emp.salary),/*#__PURE__*/React.createElement(\"td\",null,((_jobTypes$find=jobTypes.find(job=>job.id===emp.job_type))===null||_jobTypes$find===void 0?void 0:_jobTypes$find.name)||'Unknown Job Type'),/*#__PURE__*/React.createElement(\"td\",null,((_departments$find=departments.find(dept=>dept.id===emp.department))===null||_departments$find===void 0?void 0:_departments$find.name)||'Unknown Department'));})));};export default FilterComp;","map":{"version":3,"names":["React","useState","FilterComp","_ref","employees","jobTypes","departments","filteredEmployees","setFilteredEmployees","selectedJobTypes","setSelectedJobTypes","selectedDepartments","setSelectedDepartments","handleJobTypeChange","e","value","checked","target","prevState","filter","id","handleDepartmentChange","handleSubmit","preventDefault","filtered","emp","matchesJobType","length","includes","job_type","toString","matchesDepartment","department","createElement","onSubmit","map","jobType","key","type","onChange","htmlFor","name","dept","EmployeeTable","_ref2","className","_jobTypes$find","_departments$find","first_name","last_name","salary","find","job"],"sources":["/Users/Roman/Desktop/RBP/frontend/src/components/FilterComp.js"],"sourcesContent":["import React, { useState } from 'react';\n\n// Объединенный компонент FilterForm, который включает фильтрацию и отображение таблицы\nconst FilterComp = ({ employees, jobTypes, departments }) => {\n    const [filteredEmployees, setFilteredEmployees] = useState(employees);\n    const [selectedJobTypes, setSelectedJobTypes] = useState([]);\n    const [selectedDepartments, setSelectedDepartments] = useState([]);\n\n    // Функция обработки изменений в фильтрах Job Type\n    const handleJobTypeChange = (e) => {\n        const { value, checked } = e.target;\n        setSelectedJobTypes(prevState => \n            checked ? [...prevState, value] : prevState.filter(id => id !== value)\n        );\n    };\n\n    // Функция обработки изменений в фильтрах Department\n    const handleDepartmentChange = (e) => {\n        const { value, checked } = e.target;\n        setSelectedDepartments(prevState => \n            checked ? [...prevState, value] : prevState.filter(id => id !== value)\n        );\n    };\n\n    // Функция отправки фильтров\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        const filtered = employees.filter(emp => {\n            const matchesJobType = selectedJobTypes.length === 0 || selectedJobTypes.includes(emp.job_type.toString());\n            const matchesDepartment = selectedDepartments.length === 0 || selectedDepartments.includes(emp.department.toString());\n\n            return matchesJobType && matchesDepartment;\n        });\n\n        setFilteredEmployees(filtered);\n    };\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <h3>Filter Employees</h3>\n                \n                <div>\n                    <h4>Job Types</h4>\n                    {jobTypes.map(jobType => (\n                        <div key={jobType.id}>\n                            <input\n                                type=\"checkbox\"\n                                id={`jobType-${jobType.id}`}\n                                value={jobType.id}\n                                onChange={handleJobTypeChange}\n                            />\n                            <label htmlFor={`jobType-${jobType.id}`}>{jobType.name}</label>\n                        </div>\n                    ))}\n                </div>\n\n                <div>\n                    <h4>Departments</h4>\n                    {departments.map(dept => (\n                        <div key={dept.id}>\n                            <input\n                                type=\"checkbox\"\n                                id={`dept-${dept.id}`}\n                                value={dept.id}\n                                onChange={handleDepartmentChange}\n                            />\n                            <label htmlFor={`dept-${dept.id}`}>{dept.name}</label>\n                        </div>\n                    ))}\n                </div>\n\n                <button type=\"submit\">Apply Filters</button>\n            </form>\n\n            {/* Таблица сотрудников */}\n            <EmployeeTable \n                employees={filteredEmployees} \n                jobTypes={jobTypes} \n                departments={departments} \n            />\n        </div>\n    );\n};\n\n// Компонент таблицы для отображения сотрудников\nconst EmployeeTable = ({ employees, jobTypes, departments }) => {\n    return (\n        <table className=\"styled-table\">\n            <thead>\n                <tr>\n                    <th>First Name</th>\n                    <th>Last Name</th>\n                    <th>Salary</th>\n                    <th>Job Type</th>\n                    <th>Department</th>\n                </tr>\n            </thead>\n            <tbody>\n                {employees.map(emp => (\n                    <tr key={emp.id}>\n                        <td>{emp.first_name}</td>\n                        <td>{emp.last_name}</td>\n                        <td>{emp.salary}</td>\n                        <td>{jobTypes.find(job => job.id === emp.job_type)?.name || 'Unknown Job Type'}</td>\n                        <td>{departments.find(dept => dept.id === emp.department)?.name || 'Unknown Department'}</td>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    );\n};\n\nexport default FilterComp;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}