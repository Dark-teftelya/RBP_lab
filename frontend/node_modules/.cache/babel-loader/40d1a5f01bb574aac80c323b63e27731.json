{"ast":null,"code":"import React,{useEffect,useState}from'react';import axios from'axios';import'./EmployeeList.css';// Импортируем стили для таблицы\nimport{Document,Packer,Paragraph,Table,TableRow,TableCell,WidthType}from'docx';import{saveAs}from'file-saver';const EmployeeList=()=>{const[employees,setEmployees]=useState([]);const[jobTypes,setJobTypes]=useState([]);const[departments,setDepartments]=useState([]);// Состояние для модального окна\nconst[isModalOpen,setIsModalOpen]=useState(false);const[employeeToEdit,setEmployeeToEdit]=useState(null);const[editedEmployee,setEditedEmployee]=useState({first_name:'',last_name:'',salary:'',job_type:'',department:''});const[editedJobType,setEditedJobType]=useState({});const[editedDepartment,setEditedDepartment]=useState({});const[isEditJobTypeModalOpen,setIsEditJobTypeModalOpen]=useState(false);const[isEditDepartmentModalOpen,setIsEditDepartmentModalOpen]=useState(false);const[newEmployee,setNewEmployee]=useState({first_name:'',last_name:'',salary:'',job_type:'',department:''});const[newJobType,setNewJobType]=useState({name:''});const[newDepartment,setNewDepartment]=useState({name:''});// Новая функция для экспорта в docx\nconst handleExportEmployees=()=>{const doc=new Document({sections:[{properties:{},children:[new Paragraph({text:'Employee List',heading:'Title'}),new Table({rows:[new TableRow({children:[new TableCell({children:[new Paragraph('First Name')],width:{size:25,type:WidthType.PERCENTAGE}}),new TableCell({children:[new Paragraph('Last Name')],width:{size:25,type:WidthType.PERCENTAGE}}),new TableCell({children:[new Paragraph('Salary')],width:{size:25,type:WidthType.PERCENTAGE}}),new TableCell({children:[new Paragraph('Job Type')],width:{size:25,type:WidthType.PERCENTAGE}}),new TableCell({children:[new Paragraph('Department')],width:{size:25,type:WidthType.PERCENTAGE}})]}),...employees.map(emp=>{var _emp$salary,_jobTypes$find,_departments$find;return new TableRow({children:[new TableCell({children:[new Paragraph(emp.first_name||'')]}),new TableCell({children:[new Paragraph(emp.last_name||'')]}),new TableCell({children:[new Paragraph(((_emp$salary=emp.salary)===null||_emp$salary===void 0?void 0:_emp$salary.toString())||'')]}),new TableCell({children:[new Paragraph(((_jobTypes$find=jobTypes.find(job=>job.id===emp.job_type))===null||_jobTypes$find===void 0?void 0:_jobTypes$find.name)||'Unknown Job Type')]}),new TableCell({children:[new Paragraph(((_departments$find=departments.find(dept=>dept.id===emp.department))===null||_departments$find===void 0?void 0:_departments$find.name)||'Unknown Department')]})]});})]})]}]});// Генерация файла и скачивание\nPacker.toBlob(doc).then(blob=>{saveAs(blob,'employees.docx');});};const handleExportJobTypes=()=>{const doc=new Document({sections:[{properties:{},children:[new Paragraph({text:'JobType List',heading:'Title'}),new Table({rows:[new TableRow({children:[new TableCell({children:[new Paragraph('Name')],width:{size:25,type:WidthType.PERCENTAGE}})]}),...jobTypes.map(emp=>new TableRow({children:[new TableCell({children:[new Paragraph(emp.name)]})]}))]})]}]});// Генерация файла и скачивание\nPacker.toBlob(doc).then(blob=>{saveAs(blob,'jobtypes.docx');});};useEffect(()=>{// Запрос к API на Django для получения списка сотрудников\naxios.get('http://localhost:8000/api/employees/').then(res=>{setEmployees(res.data);}).catch(err=>{console.error(err);});// Запрос к API для получения списка типов работы\naxios.get('http://localhost:8000/api/job-types/').then(res=>{setJobTypes(res.data);}).catch(err=>{console.error(err);});// Получение данных отделов\naxios.get('http://localhost:8000/api/departments/').then(res=>{setDepartments(res.data);}).catch(err=>{console.error(err);});},[]);// Функция для удаления сотрудника\nconst handleDeleteEmployee=id=>{axios.delete(`http://localhost:8000/api/employees/${id}/`).then(()=>{setEmployees(employees.filter(employee=>employee.id!==id));}).catch(err=>{console.error(err);});};// Функция для добавления нового сотрудника\nconst handleAddEmployee=e=>{e.preventDefault();if(!newEmployee.first_name||!newEmployee.last_name||!newEmployee.salary||!newEmployee.job_type){console.error('All fields are required');return;}axios.post('http://localhost:8000/api/employees/',newEmployee).then(res=>{setEmployees([...employees,res.data]);setNewEmployee({first_name:'',last_name:'',salary:'',job_type:'',department:''});}).catch(err=>{console.error(err.response.data);});};// Функция для добавления нового типа работы\nconst handleAddJobType=e=>{e.preventDefault();axios.post('http://localhost:8000/api/job-types/',newJobType).then(res=>{setJobTypes([...jobTypes,res.data]);// Обновляем список типов работы\nsetNewJobType({name:''});// Очищаем поля ввода\n}).catch(err=>{console.error(err);});};// Функция для удаления типа работы\nconst handleDeleteJobType=id=>{axios.delete(`http://localhost:8000/api/job-types/${id}/`).then(()=>{setJobTypes(jobTypes.filter(jobType=>jobType.id!==id));}).catch(err=>{console.error(err);});};const handleAddDepartment=e=>{e.preventDefault();axios.post('http://localhost:8000/api/departments/',newDepartment).then(res=>{setDepartments([...departments,res.data]);// Обновляем список отделов\nsetNewDepartment({name:''});// Очищаем поля ввода\n}).catch(err=>{console.error(err);});};const handleDeleteDepartment=id=>{axios.delete(`http://localhost:8000/api/departments/${id}/`).then(()=>{setDepartments(departments.filter(department=>department.id!==id));}).catch(err=>{console.error(err);});};// Открытие модального окна для редактирования сотрудников\nconst handleEditEmployee=id=>{const employee=employees.find(emp=>emp.id===id);if(employee){setEmployeeToEdit(employee);setEditedEmployee({first_name:employee.first_name,last_name:employee.last_name,salary:employee.salary,job_type:employee.job_type,department:employee.department});setIsModalOpen(true);}};// Закрытие модального окна\nconst closeModal=()=>{setIsModalOpen(false);setEmployeeToEdit(null);};// Обновление данных сотрудника при изменении в модальной форме\nconst handleInputChange=e=>{const{name,value}=e.target;setEditedEmployee({...editedEmployee,[name]:value});};// Сохранение изменений сотрудника\nconst handleSaveChanges=()=>{axios.put(`http://localhost:8000/api/employees/${employeeToEdit.id}/`,editedEmployee).then(()=>{// Обновляем список сотрудников\nsetEmployees(employees.map(emp=>emp.id===employeeToEdit.id?editedEmployee:emp));closeModal();}).catch(err=>{console.error(err);});};// Открытие модального окна для редактирования типа работы\nconst handleEditJobType=id=>{const jobType=jobTypes.find(jobType=>jobType.id===id);// Найти тип работы по ID\nif(jobType){setEditedJobType({name:jobType.name// Устанавливаем редактируемый тип работы\n});setIsEditJobTypeModalOpen(true);// Открываем модальное окно\n}};// Закрытие модального окна для редактирования типа работы\nconst closeEditJobTypeModal=()=>{setIsEditJobTypeModalOpen(false);// Закрываем модальное окно\nsetEditedJobType({});// Сбрасываем редактируемый тип работы\n};// Сохранение изменений типа работы\nconst handleEditJobTypeSubmit=async e=>{e.preventDefault();// Предотвращаем стандартное поведение формы\ntry{const response=await fetch(`/api/job-types/${editedJobType.id}`,{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify({name:editedJobType.name// Отправляем измененное имя типа работы\n})});if(!response.ok){const errorData=await response.json();throw new Error(`Ошибка при обновлении типа работы: ${errorData.message||response.statusText}`);}const updatedJobType=await response.json();setJobTypes(prevJobTypes=>prevJobTypes.map(jobType=>jobType.id===updatedJobType.id?updatedJobType:jobType));closeEditJobTypeModal();// Закрытие модального окна\n}catch(error){console.error('Ошибка:',error);alert('Произошла ошибка при обновлении типа работы: '+error.message);}};// Открытие модального окна для редактирования отдела\nconst handleEditDepartment=id=>{const department=departments.find(dep=>dep.id===id);if(department){setEditedDepartment(department);setIsEditDepartmentModalOpen(true);// Открываем модальное окно\n}};// Закрытие модального окна для редактирования отдела\nconst closeEditDepartmentModal=()=>{setIsEditDepartmentModalOpen(false);// Закрываем модальное окно\nsetEditedDepartment({});// Сбрасываем редактируемый отдел\n};// Обновление отдела\nconst handleEditDepartmentSubmit=async e=>{e.preventDefault();// Предотвращаем стандартное поведение формы\ntry{const response=await fetch(`/api/departments/${editedDepartment.id}`,{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify({name:editedDepartment.name})});if(!response.ok){throw new Error('Ошибка при обновлении отдела');}const updatedDepartment=await response.json();setDepartments(prevDepartments=>prevDepartments.map(department=>department.id===updatedDepartment.id?updatedDepartment:department));closeEditDepartmentModal();// Закрытие модального окна\n}catch(error){console.error('Ошибка:',error);alert('Произошла ошибка при обновлении отдела: '+error.message);}};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"header\",{className:\"header\"},/*#__PURE__*/React.createElement(\"div\",{className:\"cube\"},/*#__PURE__*/React.createElement(\"div\",{className:\"side front\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"side back\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"side left\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"side right\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"side top\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"side bottom\"})),/*#__PURE__*/React.createElement(\"h1\",null,\"Employee Management System\"),/*#__PURE__*/React.createElement(\"nav\",null,/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"a\",{href:\"#add-employee\"},\"Add Employee\")),/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"a\",{href:\"#add-job-type\"},\"Add Job Type\")),/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"a\",{href:\"#add-department\"},\"Add Department\"))))),/*#__PURE__*/React.createElement(\"main\",null,/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleAddEmployee,className:\"employee-form\",id:\"add-employee\"},/*#__PURE__*/React.createElement(\"h2\",null,\"Add New Employee\"),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",placeholder:\"First Name\",value:newEmployee.first_name,onChange:e=>setNewEmployee({...newEmployee,first_name:e.target.value}),required:true}),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",placeholder:\"Last Name\",value:newEmployee.last_name,onChange:e=>setNewEmployee({...newEmployee,last_name:e.target.value}),required:true}),/*#__PURE__*/React.createElement(\"input\",{type:\"number\",placeholder:\"Salary\",value:newEmployee.salary,onChange:e=>setNewEmployee({...newEmployee,salary:e.target.value}),required:true}),/*#__PURE__*/React.createElement(\"select\",{value:newEmployee.job_type,onChange:e=>setNewEmployee({...newEmployee,job_type:e.target.value}),required:true},/*#__PURE__*/React.createElement(\"option\",{value:\"\"},\"Select Job Type\"),jobTypes.map(jobType=>/*#__PURE__*/React.createElement(\"option\",{key:jobType.id,value:jobType.id},jobType.name))),/*#__PURE__*/React.createElement(\"select\",{value:newEmployee.department,onChange:e=>setNewEmployee({...newEmployee,department:e.target.value}),required:true},/*#__PURE__*/React.createElement(\"option\",{value:\"\"},\"Select Department\"),departments.map(department=>/*#__PURE__*/React.createElement(\"option\",{key:department.id,value:department.id},department.name))),/*#__PURE__*/React.createElement(\"button\",{type:\"submit\"},\"Add Employee\")),isModalOpen&&/*#__PURE__*/React.createElement(\"div\",{className:\"modal\"},/*#__PURE__*/React.createElement(\"div\",{className:\"modal-content\"},/*#__PURE__*/React.createElement(\"h2\",null,\"Edit Employee\"),/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleSaveChanges},/*#__PURE__*/React.createElement(\"input\",{type:\"text\",name:\"first_name\",placeholder:\"First Name\",value:editedEmployee.first_name,onChange:handleInputChange,required:true}),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",name:\"last_name\",placeholder:\"Last Name\",value:editedEmployee.last_name,onChange:handleInputChange,required:true}),/*#__PURE__*/React.createElement(\"input\",{type:\"number\",name:\"salary\",placeholder:\"Salary\",value:editedEmployee.salary,onChange:handleInputChange,required:true}),/*#__PURE__*/React.createElement(\"select\",{name:\"job_type\",value:editedEmployee.job_type,onChange:handleInputChange,required:true},/*#__PURE__*/React.createElement(\"option\",{value:\"\"},\"Select Job Type\"),jobTypes.map(jobType=>/*#__PURE__*/React.createElement(\"option\",{key:jobType.id,value:jobType.id},jobType.name))),/*#__PURE__*/React.createElement(\"select\",{name:\"department\",value:editedEmployee.department,onChange:handleInputChange,required:true},/*#__PURE__*/React.createElement(\"option\",{value:\"\"},\"Select Department\"),departments.map(dept=>/*#__PURE__*/React.createElement(\"option\",{key:dept.id,value:dept.id},dept.name))),/*#__PURE__*/React.createElement(\"button\",{type:\"submit\"},\"Save Changes\"),/*#__PURE__*/React.createElement(\"button\",{type:\"button\",onClick:closeModal},\"Cancel\")))),/*#__PURE__*/React.createElement(\"table\",{className:\"styled-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"First Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Last Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Salary\"),/*#__PURE__*/React.createElement(\"th\",null,\"Job Type\"),/*#__PURE__*/React.createElement(\"th\",null,\"Department\"),\" \",/*#__PURE__*/React.createElement(\"th\",null,\"Actions\"))),/*#__PURE__*/React.createElement(\"tbody\",null,employees.map(employee=>{var _jobTypes$find2,_departments$find2;return/*#__PURE__*/React.createElement(\"tr\",{key:employee.id},/*#__PURE__*/React.createElement(\"td\",null,employee.first_name),/*#__PURE__*/React.createElement(\"td\",null,employee.last_name),/*#__PURE__*/React.createElement(\"td\",null,employee.salary),/*#__PURE__*/React.createElement(\"td\",null,((_jobTypes$find2=jobTypes.find(job=>job.id===employee.job_type))===null||_jobTypes$find2===void 0?void 0:_jobTypes$find2.name)||'Unknown Job Type'),/*#__PURE__*/React.createElement(\"td\",null,((_departments$find2=departments.find(dept=>dept.id===employee.department))===null||_departments$find2===void 0?void 0:_departments$find2.name)||'Unknown Department'),/*#__PURE__*/React.createElement(\"td\",null,/*#__PURE__*/React.createElement(\"button\",{className:\"edit-button\",onClick:()=>handleEditEmployee(employee.id)},\" \",/*#__PURE__*/React.createElement(\"span\",{role:\"img\",\"aria-label\":\"\\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\"},\"\\u270F\\uFE0F\")),/*#__PURE__*/React.createElement(\"button\",{className:\"delete-button\",onClick:()=>handleDeleteEmployee(employee.id)},/*#__PURE__*/React.createElement(\"span\",{role:\"img\",\"aria-label\":\"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"},\"\\uD83D\\uDDD1\\uFE0F\"))));}))),/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleAddJobType,className:\"job-type-form\",id:\"add-job-type\"},/*#__PURE__*/React.createElement(\"h2\",null,\"Add New Job Type\"),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",placeholder:\"Job Type Name\",value:newJobType.name,onChange:e=>setNewJobType({name:e.target.value}),required:true}),/*#__PURE__*/React.createElement(\"button\",{type:\"submit\"},\"Add Job Type\")),isEditJobTypeModalOpen&&/*#__PURE__*/React.createElement(\"div\",{className:\"modal\"},/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleEditJobTypeSubmit},/*#__PURE__*/React.createElement(\"h2\",null,\"\\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C \\u0442\\u0438\\u043F \\u0440\\u0430\\u0431\\u043E\\u0442\\u044B\"),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",value:editedJobType.name||'',onChange:e=>setEditedJobType({...editedJobType,name:e.target.value}),placeholder:\"\\u0418\\u043C\\u044F \\u0442\\u0438\\u043F\\u0430 \\u0440\\u0430\\u0431\\u043E\\u0442\\u044B\"}),/*#__PURE__*/React.createElement(\"button\",{type:\"submit\"},\"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C \\u0438\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u044F\"),/*#__PURE__*/React.createElement(\"button\",{type:\"button\",onClick:closeEditJobTypeModal},\"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C\"))),/*#__PURE__*/React.createElement(\"table\",{className:\"styled-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Job Type\"),/*#__PURE__*/React.createElement(\"th\",null,\"Actions\"))),/*#__PURE__*/React.createElement(\"tbody\",null,jobTypes.map(jobType=>/*#__PURE__*/React.createElement(\"tr\",{key:jobType.id},/*#__PURE__*/React.createElement(\"td\",null,jobType.name),/*#__PURE__*/React.createElement(\"td\",null,/*#__PURE__*/React.createElement(\"button\",{className:\"edit-button\",onClick:()=>handleEditJobType(jobType.id)},/*#__PURE__*/React.createElement(\"span\",{role:\"img\",\"aria-label\":\"\\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\"},\"\\u270F\\uFE0F\")),/*#__PURE__*/React.createElement(\"button\",{className:\"delete-button\",onClick:()=>handleDeleteJobType(jobType.id)},/*#__PURE__*/React.createElement(\"span\",{role:\"img\",\"aria-label\":\"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"},\"\\uD83D\\uDDD1\\uFE0F\"))))))),/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleAddDepartment,className:\"department-form\",id:\"add-department\"},/*#__PURE__*/React.createElement(\"h2\",null,\"Add New Department\"),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",placeholder:\"Department Name\",value:newDepartment.name,onChange:e=>setNewDepartment({name:e.target.value}),required:true}),/*#__PURE__*/React.createElement(\"button\",{type:\"submit\"},\"Add Department\")),isEditDepartmentModalOpen&&/*#__PURE__*/React.createElement(\"div\",{className:\"modal\"},/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleEditDepartmentSubmit},/*#__PURE__*/React.createElement(\"h2\",null,\"\\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C \\u043E\\u0442\\u0434\\u0435\\u043B\"),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",value:editedDepartment.name,onChange:e=>setEditedDepartment({...editedDepartment,name:e.target.value}),placeholder:\"\\u0418\\u043C\\u044F \\u043E\\u0442\\u0434\\u0435\\u043B\\u0430\"}),/*#__PURE__*/React.createElement(\"button\",{type:\"submit\"},\"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C \\u0438\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u044F\"),/*#__PURE__*/React.createElement(\"button\",{type:\"button\",onClick:closeEditDepartmentModal},\"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C\"))),/*#__PURE__*/React.createElement(\"table\",{className:\"styled-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Department Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Actions\"))),/*#__PURE__*/React.createElement(\"tbody\",null,departments.map(department=>/*#__PURE__*/React.createElement(\"tr\",{key:department.id},/*#__PURE__*/React.createElement(\"td\",null,department.name),/*#__PURE__*/React.createElement(\"td\",null,/*#__PURE__*/React.createElement(\"button\",{className:\"edit-button\",onClick:()=>handleEditDepartment(department.id)},\" \",/*#__PURE__*/React.createElement(\"span\",{role:\"img\",\"aria-label\":\"\\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\"},\"\\u270F\\uFE0F\")),/*#__PURE__*/React.createElement(\"button\",{className:\"delete-button\",onClick:()=>handleDeleteDepartment(department.id)},/*#__PURE__*/React.createElement(\"span\",{role:\"img\",\"aria-label\":\"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"},\"\\uD83D\\uDDD1\\uFE0F\"))))))),/*#__PURE__*/React.createElement(\"div\",{className:\"export-buttons\"},/*#__PURE__*/React.createElement(\"button\",{className:\"export-button\",onClick:handleExportEmployees},\"Export Employees to Text File\"),/*#__PURE__*/React.createElement(\"button\",{className:\"export-button\",onClick:handleExportJobTypes},\"Export Job Types to Text File\"))),/*#__PURE__*/React.createElement(\"footer\",{className:\"footer\"},/*#__PURE__*/React.createElement(\"p\",null,\"\\xA9 2024 Employee Management System\")));};export default EmployeeList;","map":{"version":3,"names":["React","useEffect","useState","axios","Document","Packer","Paragraph","Table","TableRow","TableCell","WidthType","saveAs","EmployeeList","employees","setEmployees","jobTypes","setJobTypes","departments","setDepartments","isModalOpen","setIsModalOpen","employeeToEdit","setEmployeeToEdit","editedEmployee","setEditedEmployee","first_name","last_name","salary","job_type","department","editedJobType","setEditedJobType","editedDepartment","setEditedDepartment","isEditJobTypeModalOpen","setIsEditJobTypeModalOpen","isEditDepartmentModalOpen","setIsEditDepartmentModalOpen","newEmployee","setNewEmployee","newJobType","setNewJobType","name","newDepartment","setNewDepartment","handleExportEmployees","doc","sections","properties","children","text","heading","rows","width","size","type","PERCENTAGE","map","emp","_emp$salary","_jobTypes$find","_departments$find","toString","find","job","id","dept","toBlob","then","blob","handleExportJobTypes","get","res","data","catch","err","console","error","handleDeleteEmployee","delete","filter","employee","handleAddEmployee","e","preventDefault","post","response","handleAddJobType","handleDeleteJobType","jobType","handleAddDepartment","handleDeleteDepartment","handleEditEmployee","closeModal","handleInputChange","value","target","handleSaveChanges","put","handleEditJobType","closeEditJobTypeModal","handleEditJobTypeSubmit","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","message","statusText","updatedJobType","prevJobTypes","alert","handleEditDepartment","dep","closeEditDepartmentModal","handleEditDepartmentSubmit","updatedDepartment","prevDepartments","createElement","className","href","onSubmit","placeholder","onChange","required","key","onClick","_jobTypes$find2","_departments$find2","role"],"sources":["/Users/Roman/Desktop/RBP/frontend/src/components/EmployeeList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './EmployeeList.css'; // Импортируем стили для таблицы\nimport { Document, Packer, Paragraph, Table, TableRow, TableCell, WidthType } from 'docx';\nimport { saveAs } from 'file-saver';\nconst EmployeeList = () => {\n    const [employees, setEmployees] = useState([]);\n    const [jobTypes, setJobTypes] = useState([]);\n    const [departments, setDepartments] = useState([]);\n    \n    // Состояние для модального окна\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [employeeToEdit, setEmployeeToEdit] = useState(null);\n    const [editedEmployee, setEditedEmployee] = useState({\n        first_name: '',\n        last_name: '',\n        salary: '',\n        job_type: '',\n        department: ''\n    });\n\n    const [editedJobType, setEditedJobType] = useState({});\n    const [editedDepartment, setEditedDepartment] = useState({});\n    \n    const [isEditJobTypeModalOpen, setIsEditJobTypeModalOpen] = useState(false);\n    const [isEditDepartmentModalOpen, setIsEditDepartmentModalOpen] = useState(false);\n\n    const [newEmployee, setNewEmployee] = useState({\n        first_name: '',\n        last_name: '',\n        salary: '',\n        job_type: '',\n        department: '',\n    });\n    const [newJobType, setNewJobType] = useState({\n        name: '',\n    });\n    const [newDepartment, setNewDepartment] = useState({\n        name: '' });\n\n        // Новая функция для экспорта в docx\n    const handleExportEmployees = () => {\n        const doc = new Document({\n            sections: [\n                {\n                    properties: {},\n                    children: [\n                        new Paragraph({\n                            text: 'Employee List',\n                            heading: 'Title',\n                        }),\n                        new Table({\n                            rows: [\n                                new TableRow({\n                                    children: [\n                                        new TableCell({\n                                            children: [new Paragraph('First Name')],\n                                            width: { size: 25, type: WidthType.PERCENTAGE }\n                                        }),\n                                        new TableCell({\n                                            children: [new Paragraph('Last Name')],\n                                            width: { size: 25, type: WidthType.PERCENTAGE }\n                                        }),\n                                        new TableCell({\n                                            children: [new Paragraph('Salary')],\n                                            width: { size: 25, type: WidthType.PERCENTAGE }\n                                        }),\n                                        new TableCell({\n                                            children: [new Paragraph('Job Type')],\n                                            width: { size: 25, type: WidthType.PERCENTAGE }\n                                        }),\n                                        new TableCell({\n                                            children: [new Paragraph('Department')],\n                                            width: { size: 25, type: WidthType.PERCENTAGE }\n                                        }),\n                                    ]\n                                }),\n                                ...employees.map(emp => \n                                    new TableRow({\n                                        children: [\n                                            new TableCell({\n                                                children: [new Paragraph(emp.first_name || '')]\n                                            }),\n                                            new TableCell({\n                                                children: [new Paragraph(emp.last_name || '')]\n                                            }),\n                                            new TableCell({\n                                                children: [new Paragraph(emp.salary?.toString() || '')]\n                                            }),\n                                            new TableCell({\n                                                children: [\n                                                    new Paragraph(\n                                                        jobTypes.find(job => job.id === emp.job_type)?.name || 'Unknown Job Type'\n                                                    )\n                                                ]\n                                            }),\n                                            new TableCell({\n                                                children: [\n                                                    new Paragraph(\n                                                        departments.find(dept => dept.id === emp.department)?.name || 'Unknown Department'\n                                                    )\n                                                ]\n                                            }),\n                                        ]\n                                    })\n                                )\n                            ]\n                        })\n                    ]\n                }\n            ]\n        });\n    \n        // Генерация файла и скачивание\n        Packer.toBlob(doc).then(blob => {\n            saveAs(blob, 'employees.docx');\n        });\n    };\n    \n\n    const handleExportJobTypes = () => {\n        const doc = new Document({\n            sections: [\n                {\n                    properties: {},\n                    children: [\n                        new Paragraph({\n                            text: 'JobType List',\n                            heading: 'Title',\n                        }),\n                        new Table({\n                            rows: [\n                                new TableRow({\n                                    children: [\n                                        new TableCell({\n                                            children: [new Paragraph('Name')],\n                                            width: { size: 25, type: WidthType.PERCENTAGE }\n                                        }),\n                                    ]\n                                }),\n                                ...jobTypes.map(emp => \n                                    new TableRow({\n                                        children: [\n                                            new TableCell({\n                                                children: [new Paragraph(emp.name)]\n                                            }),\n                                        ]\n                                    })\n                                )\n                            ]\n                        })\n                    ]\n                }\n            ]\n        });\n\n          // Генерация файла и скачивание\n        Packer.toBlob(doc).then(blob => {\n            saveAs(blob, 'jobtypes.docx');\n        });\n    };\n\n    useEffect(() => {\n        // Запрос к API на Django для получения списка сотрудников\n        axios.get('http://localhost:8000/api/employees/')\n            .then(res => {\n                setEmployees(res.data);\n            })\n            .catch(err => {\n                console.error(err);\n            });\n\n        // Запрос к API для получения списка типов работы\n        axios.get('http://localhost:8000/api/job-types/')\n            .then(res => {\n                setJobTypes(res.data);\n            })\n            .catch(err => {\n                console.error(err);\n            });\n\n         // Получение данных отделов\n        axios.get('http://localhost:8000/api/departments/')\n            .then(res => {\n                setDepartments(res.data);\n            })\n            .catch(err => {\n                console.error(err);\n            });\n\n    }, []);\n\n    // Функция для удаления сотрудника\n    const handleDeleteEmployee = (id) => {\n        axios.delete(`http://localhost:8000/api/employees/${id}/`)\n            .then(() => {\n                setEmployees(employees.filter(employee => employee.id !== id));\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    };\n\n    // Функция для добавления нового сотрудника\n    const handleAddEmployee = (e) => {\n        e.preventDefault();\n    \n        if (!newEmployee.first_name || !newEmployee.last_name || !newEmployee.salary || !newEmployee.job_type) {\n            console.error('All fields are required');\n            return;\n        }\n    \n        axios.post('http://localhost:8000/api/employees/', newEmployee)\n            .then((res) => {\n                setEmployees([...employees, res.data]);\n                setNewEmployee({ first_name: '', last_name: '', salary: '', job_type: '', department: '' });\n                \n            })\n            .catch(err => {\n                console.error(err.response.data);\n                \n            });\n    };\n    \n\n    // Функция для добавления нового типа работы\n    const handleAddJobType = (e) => {\n        e.preventDefault();\n\n        axios.post('http://localhost:8000/api/job-types/', newJobType)\n            .then((res) => {\n                setJobTypes([...jobTypes, res.data]); // Обновляем список типов работы\n                setNewJobType({ name: '' }); // Очищаем поля ввода\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    };\n\n    // Функция для удаления типа работы\n    const handleDeleteJobType = (id) => {\n        axios.delete(`http://localhost:8000/api/job-types/${id}/`)\n            .then(() => {\n                setJobTypes(jobTypes.filter(jobType => jobType.id !== id));\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    };\n\n    const handleAddDepartment = (e) => {\n        e.preventDefault();\n        axios.post('http://localhost:8000/api/departments/', newDepartment)\n            .then((res) => {\n                setDepartments([...departments, res.data]); // Обновляем список отделов\n                setNewDepartment({ name: '' }); // Очищаем поля ввода\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    };\n    \n    const handleDeleteDepartment = (id) => {\n        axios.delete(`http://localhost:8000/api/departments/${id}/`)\n            .then(() => {\n                setDepartments(departments.filter(department => department.id !== id));\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    };\n\n    // Открытие модального окна для редактирования сотрудников\n    const handleEditEmployee = (id) => {\n        const employee = employees.find(emp => emp.id === id);\n        if (employee) {\n            setEmployeeToEdit(employee);\n            setEditedEmployee({\n                first_name: employee.first_name,\n                last_name: employee.last_name,\n                salary: employee.salary,\n                job_type: employee.job_type,\n                department: employee.department\n            });\n            setIsModalOpen(true);\n        }\n    };\n\n    // Закрытие модального окна\n    const closeModal = () => {\n        setIsModalOpen(false);\n        setEmployeeToEdit(null);\n    };\n\n    // Обновление данных сотрудника при изменении в модальной форме\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n        setEditedEmployee({\n            ...editedEmployee,\n            [name]: value\n        });\n    };\n\n    // Сохранение изменений сотрудника\n    const handleSaveChanges = () => {\n        axios.put(`http://localhost:8000/api/employees/${employeeToEdit.id}/`, editedEmployee)\n            .then(() => {\n                // Обновляем список сотрудников\n                setEmployees(employees.map(emp => emp.id === employeeToEdit.id ? editedEmployee : emp));\n                closeModal();\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    };\n\n    // Открытие модального окна для редактирования типа работы\n    const handleEditJobType = (id) => {\n        const jobType = jobTypes.find(jobType => jobType.id === id); // Найти тип работы по ID\n        if (jobType) {\n            setEditedJobType({\n                name: jobType.name // Устанавливаем редактируемый тип работы\n            });\n            setIsEditJobTypeModalOpen(true); // Открываем модальное окно\n        }\n    }; \n\n    // Закрытие модального окна для редактирования типа работы\n    const closeEditJobTypeModal = () => {\n        setIsEditJobTypeModalOpen(false); // Закрываем модальное окно\n        setEditedJobType({}); // Сбрасываем редактируемый тип работы\n    };\n\n    // Сохранение изменений типа работы\n    const handleEditJobTypeSubmit = async (e) => {\n        e.preventDefault(); // Предотвращаем стандартное поведение формы\n\n        try {\n            const response = await fetch(`/api/job-types/${editedJobType.id}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    name: editedJobType.name, // Отправляем измененное имя типа работы\n                }),\n            });\n\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(`Ошибка при обновлении типа работы: ${errorData.message || response.statusText}`);\n            }\n\n            const updatedJobType = await response.json();\n            setJobTypes((prevJobTypes) =>\n                prevJobTypes.map((jobType) =>\n                    jobType.id === updatedJobType.id ? updatedJobType : jobType\n                )\n            );\n\n            closeEditJobTypeModal(); // Закрытие модального окна\n        } catch (error) {\n            console.error('Ошибка:', error);\n            alert('Произошла ошибка при обновлении типа работы: ' + error.message);\n        }\n    };\n\n    // Открытие модального окна для редактирования отдела\n    const handleEditDepartment = (id) => {\n        const department = departments.find(dep => dep.id === id);\n        if (department) {\n            setEditedDepartment(department);\n            setIsEditDepartmentModalOpen(true); // Открываем модальное окно\n        }\n    };\n\n    // Закрытие модального окна для редактирования отдела\n    const closeEditDepartmentModal = () => {\n        setIsEditDepartmentModalOpen(false); // Закрываем модальное окно\n        setEditedDepartment({}); // Сбрасываем редактируемый отдел\n    };\n\n    // Обновление отдела\n    const handleEditDepartmentSubmit = async (e) => {\n        e.preventDefault(); // Предотвращаем стандартное поведение формы\n\n        try {\n            const response = await fetch(`/api/departments/${editedDepartment.id}`, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    name: editedDepartment.name,\n                }),\n            });\n\n            if (!response.ok) {\n                throw new Error('Ошибка при обновлении отдела');\n            }\n\n            const updatedDepartment = await response.json();\n            setDepartments((prevDepartments) =>\n                prevDepartments.map((department) =>\n                    department.id === updatedDepartment.id ? updatedDepartment : department\n                )\n            );\n\n            closeEditDepartmentModal(); // Закрытие модального окна\n        } catch (error) {\n            console.error('Ошибка:', error);\n            alert('Произошла ошибка при обновлении отдела: ' + error.message);\n        }\n    };\n\n        \n    return (\n        <div>\n            {/* Хедер с навигацией */}\n            <header className=\"header\">\n                <div className=\"cube\">\n                    <div className=\"side front\"></div>\n                    <div className=\"side back\"></div>\n                    <div className=\"side left\"></div>\n                    <div className=\"side right\"></div>\n                    <div className=\"side top\"></div>\n                    <div className=\"side bottom\"></div>\n                </div>\n                <h1>Employee Management System</h1>\n                <nav>\n                    <ul>\n                        <li><a href=\"#add-employee\">Add Employee</a></li>\n                        <li><a href=\"#add-job-type\">Add Job Type</a></li>\n                        <li><a href=\"#add-department\">Add Department</a></li>\n                    </ul>\n                </nav>\n            </header>\n\n            <main>\n                {/* Форма для добавления нового сотрудника */}\n                <form onSubmit={handleAddEmployee} className=\"employee-form\" id=\"add-employee\">\n                    <h2>Add New Employee</h2>\n                    <input\n                        type=\"text\"\n                        placeholder=\"First Name\"\n                        value={newEmployee.first_name}\n                        onChange={(e) => setNewEmployee({ ...newEmployee, first_name: e.target.value })}\n                        required\n                    />\n                    <input\n                        type=\"text\"\n                        placeholder=\"Last Name\"\n                        value={newEmployee.last_name}\n                        onChange={(e) => setNewEmployee({ ...newEmployee, last_name: e.target.value })}\n                        required\n                    />\n                    <input\n                        type=\"number\"\n                        placeholder=\"Salary\"\n                        value={newEmployee.salary}\n                        onChange={(e) => setNewEmployee({ ...newEmployee, salary: e.target.value })}\n                        required\n                    />\n\n                    <select\n                        value={newEmployee.job_type}\n                        onChange={(e) => setNewEmployee({ ...newEmployee, job_type: e.target.value })}\n                        required\n                    >\n                        <option value=\"\">Select Job Type</option>\n                        {jobTypes.map(jobType => (\n                            <option key={jobType.id} value={jobType.id}>{jobType.name}</option>\n                        ))}\n                    </select>\n\n                    <select\n                        value={newEmployee.department}\n                        onChange={(e) => setNewEmployee({ ...newEmployee, department: e.target.value })}\n                        required\n                    >\n                        <option value=\"\">Select Department</option>\n                        {departments.map(department => (\n                            <option key={department.id} value={department.id}>{department.name}</option>\n                        ))}\n                    </select>\n\n                    <button type=\"submit\">Add Employee</button>\n                </form>\n                \n                {isModalOpen && (\n                    <div className=\"modal\">\n                        <div className=\"modal-content\">\n                            <h2>Edit Employee</h2>\n                            <form onSubmit={handleSaveChanges}>\n                                <input\n                                    type=\"text\"\n                                    name=\"first_name\"\n                                    placeholder=\"First Name\"\n                                    value={editedEmployee.first_name}\n                                    onChange={handleInputChange}\n                                    required\n                                />\n                                <input\n                                    type=\"text\"\n                                    name=\"last_name\"\n                                    placeholder=\"Last Name\"\n                                    value={editedEmployee.last_name}\n                                    onChange={handleInputChange}\n                                    required\n                                />\n                                <input\n                                    type=\"number\"\n                                    name=\"salary\"\n                                    placeholder=\"Salary\"\n                                    value={editedEmployee.salary}\n                                    onChange={handleInputChange}\n                                    required\n                                />\n                                <select\n                                    name=\"job_type\"\n                                    value={editedEmployee.job_type}\n                                    onChange={handleInputChange}\n                                    required\n                                >\n                                    <option value=\"\">Select Job Type</option>\n                                    {jobTypes.map(jobType => (\n                                        <option key={jobType.id} value={jobType.id}>\n                                            {jobType.name}\n                                        </option>\n                                    ))}\n                                </select>\n                                <select\n                                    name=\"department\"\n                                    value={editedEmployee.department}\n                                    onChange={handleInputChange}\n                                    required\n                                >\n                                    <option value=\"\">Select Department</option>\n                                    {departments.map(dept => (\n                                        <option key={dept.id} value={dept.id}>\n                                            {dept.name}\n                                        </option>\n                                    ))}\n                                </select>\n                                <button type=\"submit\">Save Changes</button>\n                                <button type=\"button\" onClick={closeModal}>Cancel</button>\n                            </form>\n                        </div>\n                    </div>\n                )}\n\n                {/* Таблица сотрудников */}\n                <table className=\"styled-table\">\n                    <thead>\n                        <tr>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                            <th>Salary</th>\n                            <th>Job Type</th>\n                            <th>Department</th> {/* Новый столбец для отдела */}\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {employees.map(employee => (\n                            <tr key={employee.id}>\n                                <td>{employee.first_name}</td>\n                                <td>{employee.last_name}</td>\n                                <td>{employee.salary}</td>\n                                <td>\n                                    {jobTypes.find(job => job.id === employee.job_type)?.name || 'Unknown Job Type'}\n                                </td>\n                                <td>\n                                    {departments.find(dept => dept.id === employee.department)?.name || 'Unknown Department'}\n                                </td>\n                                <td>\n                                    <button\n                                        className=\"edit-button\"\n                                        onClick={() => handleEditEmployee(employee.id)}> {/* Добавлено для редактирования */}\n                                        <span role=\"img\" aria-label=\"Редактировать\">✏️</span>\n                                    </button>\n                                    <button\n                                        className=\"delete-button\"\n                                        onClick={() => handleDeleteEmployee(employee.id)}>\n                                        <span role=\"img\" aria-label=\"Удалить\">🗑️</span>\n                                    </button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n\n\n                {/* Форма для добавления нового типа работы */}\n                <form onSubmit={handleAddJobType} className=\"job-type-form\" id=\"add-job-type\">\n                    <h2>Add New Job Type</h2>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Job Type Name\"\n                        value={newJobType.name}\n                        onChange={(e) => setNewJobType({ name: e.target.value })}\n                        required\n                    />\n                    <button type=\"submit\">Add Job Type</button>\n                </form>\n\n                {/* Модальное окно для редактирования типа работы */}\n                {isEditJobTypeModalOpen && (\n                    <div className=\"modal\">\n                        <form onSubmit={handleEditJobTypeSubmit}>\n                            <h2>Редактировать тип работы</h2>\n                            <input \n                                type=\"text\" \n                                value={editedJobType.name || ''} \n                                onChange={(e) => setEditedJobType({ ...editedJobType, name: e.target.value })} \n                                placeholder=\"Имя типа работы\" \n                            />\n                            <button type=\"submit\">Сохранить изменения</button>\n                            <button type=\"button\" onClick={closeEditJobTypeModal}>Закрыть</button>\n                        </form>\n                    </div>\n                )}\n\n                {/* Таблица типов работ */}\n                <table className=\"styled-table\">\n                    <thead>\n                        <tr>\n                            <th>Job Type</th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {jobTypes.map(jobType => (\n                            <tr key={jobType.id}>\n                                <td>{jobType.name}</td>\n                                <td>\n                                    <button\n                                        className=\"edit-button\"\n                                        onClick={() => handleEditJobType(jobType.id)}>\n                                        <span role=\"img\" aria-label=\"Редактировать\">✏️</span>\n                                    </button>\n                                    <button\n                                        className=\"delete-button\"\n                                        onClick={() => handleDeleteJobType(jobType.id)}>\n                                        <span role=\"img\" aria-label=\"Удалить\">🗑️</span>\n                                    </button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n\n                <form onSubmit={handleAddDepartment} className=\"department-form\" id=\"add-department\">\n                    <h2>Add New Department</h2>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Department Name\"\n                        value={newDepartment.name}\n                        onChange={(e) => setNewDepartment({ name: e.target.value })}\n                        required\n                    />\n                    <button type=\"submit\">Add Department</button>\n                </form>\n\n                 {/* Модальное окно для редактирования отдела */}\n                {isEditDepartmentModalOpen && (\n                    <div className=\"modal\">\n                        <form onSubmit={handleEditDepartmentSubmit}>\n                            <h2>Редактировать отдел</h2>\n                            <input \n                                type=\"text\" \n                                value={editedDepartment.name} \n                                onChange={(e) => setEditedDepartment({ ...editedDepartment, name: e.target.value })} \n                                placeholder=\"Имя отдела\" \n                            />\n                            <button type=\"submit\">Сохранить изменения</button>\n                            <button type=\"button\" onClick={closeEditDepartmentModal}>Закрыть</button>\n                        </form>\n                    </div>\n                )}\n\n                {/* Таблица отдела работ */}\n                <table className=\"styled-table\">\n                    <thead>\n                        <tr>\n                            <th>Department Name</th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {departments.map(department => (\n                            <tr key={department.id}>\n                                <td>{department.name}</td>\n                                <td>\n                                    <button\n                                        className=\"edit-button\"\n                                        onClick={() => handleEditDepartment(department.id)}> {/* Добавлено для редактирования */}\n                                        <span role=\"img\" aria-label=\"Редактировать\">✏️</span>\n                                    </button>\n                                    <button\n                                        className=\"delete-button\"\n                                        onClick={() => handleDeleteDepartment(department.id)}>\n                                        <span role=\"img\" aria-label=\"Удалить\">🗑️</span>\n                                    </button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n\n\n                <div className=\"export-buttons\">\n                    <button className=\"export-button\" onClick={handleExportEmployees}>Export Employees to Text File</button>\n                    <button className=\"export-button\" onClick={handleExportJobTypes}>Export Job Types to Text File</button>\n                </div>\n            </main>\n\n            {/* Футер */}\n            <footer className=\"footer\">\n                <p>© 2024 Employee Management System</p>\n            </footer>\n        </div>\n    );\n}\n\nexport default EmployeeList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}