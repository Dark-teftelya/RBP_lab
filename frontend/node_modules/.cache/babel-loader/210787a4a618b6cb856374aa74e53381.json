{"ast":null,"code":"var _jsxFileName = \"/Users/Roman/Desktop/RBP/frontend/src/components/ExportToWord.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Document, Packer, Paragraph, Table, TableRow, TableCell, WidthType } from 'docx';\nimport { saveAs } from 'file-saver';\nconst ExportToWord = ({\n  selectedEmployees\n}) => {\n  const [jobTypes, setJobTypes] = useState([]);\n  const [departments, setDepartments] = useState([]);\n  useEffect(() => {\n    const fetchJobTypes = async () => {\n      try {\n        const response = await fetch('/api/job-types');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        console.log('Fetched job types:', data); // Логируем полученные данные\n        setJobTypes(data);\n      } catch (error) {\n        console.error('Error fetching job types:', error);\n      }\n    };\n    const fetchDepartments = async () => {\n      try {\n        const response = await fetch('/api/departments');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setDepartments(data);\n      } catch (error) {\n        console.error('Error fetching departments:', error);\n      }\n    };\n    fetchJobTypes();\n    fetchDepartments();\n  }, []);\n  const handleExport = () => {\n    if (selectedEmployees.length === 0) {\n      alert(\"Нет выбранных сотрудников для экспорта.\");\n      return;\n    }\n    const doc = new Document({\n      sections: [{\n        properties: {},\n        children: [new Paragraph({\n          text: 'Employee List',\n          heading: 'Title'\n        }), new Table({\n          rows: [new TableRow({\n            children: [new TableCell({\n              children: [new Paragraph('First Name')],\n              width: {\n                size: 20,\n                type: WidthType.PERCENTAGE\n              }\n            }), new TableCell({\n              children: [new Paragraph('Last Name')],\n              width: {\n                size: 20,\n                type: WidthType.PERCENTAGE\n              }\n            }), new TableCell({\n              children: [new Paragraph('Salary')],\n              width: {\n                size: 20,\n                type: WidthType.PERCENTAGE\n              }\n            }), new TableCell({\n              children: [new Paragraph('Job Type')],\n              width: {\n                size: 20,\n                type: WidthType.PERCENTAGE\n              }\n            }), new TableCell({\n              children: [new Paragraph('Department')],\n              width: {\n                size: 20,\n                type: WidthType.PERCENTAGE\n              }\n            })]\n          }), ...selectedEmployees.map(emp => {\n            var _emp$salary, _jobTypes$find, _departments$find;\n            return new TableRow({\n              children: [new TableCell({\n                children: [new Paragraph(emp.first_name || '')]\n              }), new TableCell({\n                children: [new Paragraph(emp.last_name || '')]\n              }), new TableCell({\n                children: [new Paragraph(((_emp$salary = emp.salary) === null || _emp$salary === void 0 ? void 0 : _emp$salary.toString()) || '')]\n              }), new TableCell({\n                children: [new Paragraph(((_jobTypes$find = jobTypes.find(job => job.id === emp.job_type)) === null || _jobTypes$find === void 0 ? void 0 : _jobTypes$find.name) || 'Unknown Job Type')]\n              }), new TableCell({\n                children: [new Paragraph(((_departments$find = departments.find(dept => dept.id === emp.department)) === null || _departments$find === void 0 ? void 0 : _departments$find.name) || 'Unknown Department')]\n              })]\n            });\n          })]\n        })]\n      }]\n    });\n\n    // Генерация файла и скачивание\n    Packer.toBlob(doc).then(blob => {\n      saveAs(blob, 'employees.docx');\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"export-button\",\n    onClick: handleExport,\n    disabled: selectedEmployees.length === 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, \"\\u042D\\u043A\\u0441\\u043F\\u043E\\u0440\\u0442 \\u0432 Word\");\n};\nexport default ExportToWord;","map":{"version":3,"names":["React","useEffect","useState","Document","Packer","Paragraph","Table","TableRow","TableCell","WidthType","saveAs","ExportToWord","selectedEmployees","jobTypes","setJobTypes","departments","setDepartments","fetchJobTypes","response","fetch","ok","Error","data","json","console","log","error","fetchDepartments","handleExport","length","alert","doc","sections","properties","children","text","heading","rows","width","size","type","PERCENTAGE","map","emp","_emp$salary","_jobTypes$find","_departments$find","first_name","last_name","salary","toString","find","job","id","job_type","name","dept","department","toBlob","then","blob","createElement","className","onClick","disabled","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/Roman/Desktop/RBP/frontend/src/components/ExportToWord.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Document, Packer, Paragraph, Table, TableRow, TableCell, WidthType } from 'docx';\nimport { saveAs } from 'file-saver';\n\nconst ExportToWord = ({ selectedEmployees }) => {\n    const [jobTypes, setJobTypes] = useState([]);\n    const [departments, setDepartments] = useState([]);\n\n    useEffect(() => {\n        const fetchJobTypes = async () => {\n            try {\n                const response = await fetch('/api/job-types');\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n                const data = await response.json();\n                console.log('Fetched job types:', data); // Логируем полученные данные\n                setJobTypes(data);\n            } catch (error) {\n                console.error('Error fetching job types:', error);\n            }\n        };\n        \n        const fetchDepartments = async () => {\n            try {\n                const response = await fetch('/api/departments');\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n                const data = await response.json();\n                setDepartments(data);\n            } catch (error) {\n                console.error('Error fetching departments:', error);\n            }\n        };\n\n        fetchJobTypes();\n        fetchDepartments();\n    }, []);\n\n    const handleExport = () => {\n        if (selectedEmployees.length === 0) {\n            alert(\"Нет выбранных сотрудников для экспорта.\");\n            return;\n        }\n\n        const doc = new Document({\n            sections: [{\n                properties: {},\n                children: [\n                    new Paragraph({\n                        text: 'Employee List',\n                        heading: 'Title',\n                    }),\n                    new Table({\n                        rows: [\n                            new TableRow({\n                                children: [\n                                    new TableCell({\n                                        children: [new Paragraph('First Name')],\n                                        width: { size: 20, type: WidthType.PERCENTAGE }\n                                    }),\n                                    new TableCell({\n                                        children: [new Paragraph('Last Name')],\n                                        width: { size: 20, type: WidthType.PERCENTAGE }\n                                    }),\n                                    new TableCell({\n                                        children: [new Paragraph('Salary')],\n                                        width: { size: 20, type: WidthType.PERCENTAGE }\n                                    }),\n                                    new TableCell({\n                                        children: [new Paragraph('Job Type')],\n                                        width: { size: 20, type: WidthType.PERCENTAGE }\n                                    }),\n                                    new TableCell({\n                                        children: [new Paragraph('Department')],\n                                        width: { size: 20, type: WidthType.PERCENTAGE }\n                                    }),\n                                ]\n                            }),\n                            ...selectedEmployees.map(emp => \n                                new TableRow({\n                                    children: [\n                                        new TableCell({\n                                            children: [new Paragraph(emp.first_name || '')]\n                                        }),\n                                        new TableCell({\n                                            children: [new Paragraph(emp.last_name || '')]\n                                        }),\n                                        new TableCell({\n                                            children: [new Paragraph(emp.salary?.toString() || '')]\n                                        }),\n                                        new TableCell({\n                                            children: [\n                                                new Paragraph(\n                                                    jobTypes.find(job => job.id === emp.job_type)?.name || 'Unknown Job Type'\n                                                )\n                                            ]\n                                        }),\n                                        new TableCell({\n                                            children: [\n                                                new Paragraph(\n                                                    departments.find(dept => dept.id === emp.department)?.name || 'Unknown Department'\n                                                )\n                                            ]\n                                        }),\n                                    ]\n                                })\n                            )\n                        ]\n                    })\n                ],\n            }],\n        });\n\n        // Генерация файла и скачивание\n        Packer.toBlob(doc).then(blob => {\n            saveAs(blob, 'employees.docx');\n        });\n    };\n\n    return (\n        <button className=\"export-button\" onClick={handleExport} disabled={selectedEmployees.length === 0}>\n            Экспорт в Word\n        </button>\n    );\n};\n\nexport default ExportToWord;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}