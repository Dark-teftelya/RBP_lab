{"ast":null,"code":"var _jsxFileName = \"/Users/Roman/Desktop/RBP/frontend/src/components/ExportToWord.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Document, Packer, Paragraph, TextRun } from 'docx';\nimport { saveAs } from 'file-saver';\nconst ExportToWord = ({\n  selectedEmployees\n}) => {\n  const [jobTypes, setJobTypes] = useState([]);\n  const [departments, setDepartments] = useState([]);\n  useEffect(() => {\n    const fetchJobTypes = async () => {\n      try {\n        const response = await fetch('/api/job-types');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        console.log('Fetched job types:', data);\n        setJobTypes(data);\n      } catch (error) {\n        console.error('Error fetching job types:', error);\n      }\n    };\n    const fetchDepartments = async () => {\n      try {\n        const response = await fetch('/api/departments');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        console.log('Fetched departments:', data);\n        setDepartments(data);\n      } catch (error) {\n        console.error('Error fetching departments:', error);\n      }\n    };\n    fetchJobTypes();\n    fetchDepartments();\n  }, []);\n  const handleExport = () => {\n    console.log('Selected Employees:', selectedEmployees);\n    console.log('Job Types:', jobTypes);\n    console.log('Departments:', departments);\n    if (selectedEmployees.length === 0) {\n      alert(\"Нет выбранных сотрудников для экспорта.\");\n      return;\n    }\n\n    // Создаем документ для каждого выбранного сотрудника\n    const docs = selectedEmployees.map(emp => {\n      var _jobTypes$find, _departments$find;\n      const jobType = ((_jobTypes$find = jobTypes.find(job => job.id === emp.job_type)) === null || _jobTypes$find === void 0 ? void 0 : _jobTypes$find.name) || 'Unknown Job Type';\n      const department = ((_departments$find = departments.find(dept => dept.id === emp.department)) === null || _departments$find === void 0 ? void 0 : _departments$find.name) || 'Unknown Department';\n      const doc = new Document({\n        sections: [{\n          properties: {},\n          children: [new Paragraph({\n            text: `Заявление на отпуск`,\n            heading: 'Title'\n          }), new Paragraph({\n            text: `Я, ${emp.first_name} ${emp.last_name}, занимающий должность \"${jobType}\" в отделе \"${department}\", прошу предоставить мне отпуск.`,\n            spacing: {\n              after: 200\n            }\n          }), new Paragraph({\n            text: `Дата начала отпуска: ____________`,\n            spacing: {\n              after: 200\n            }\n          }), new Paragraph({\n            text: `Дата окончания отпуска: ____________`,\n            spacing: {\n              after: 200\n            }\n          }), new Paragraph({\n            text: `Подпись: ____________`,\n            spacing: {\n              after: 200\n            }\n          }), new Paragraph({\n            text: `Дата генерации документа: ${new Date().toLocaleDateString()}`,\n            spacing: {\n              after: 200\n            }\n          })]\n        }]\n      });\n      return doc;\n    });\n\n    // Генерация файлов и скачивание для каждого сотрудника\n    docs.forEach((doc, index) => {\n      Packer.toBlob(doc).then(blob => {\n        saveAs(blob, `employee_${selectedEmployees[index].first_name}_${selectedEmployees[index].last_name}_vacation_request.docx`);\n      });\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"export-button\",\n    onClick: handleExport,\n    disabled: selectedEmployees.length === 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, \"\\u042D\\u043A\\u0441\\u043F\\u043E\\u0440\\u0442 \\u0432 Word\");\n};\nexport default ExportToWord;","map":{"version":3,"names":["React","useEffect","useState","Document","Packer","Paragraph","TextRun","saveAs","ExportToWord","selectedEmployees","jobTypes","setJobTypes","departments","setDepartments","fetchJobTypes","response","fetch","ok","Error","data","json","console","log","error","fetchDepartments","handleExport","length","alert","docs","map","emp","_jobTypes$find","_departments$find","jobType","find","job","id","job_type","name","department","dept","doc","sections","properties","children","text","heading","first_name","last_name","spacing","after","Date","toLocaleDateString","forEach","index","toBlob","then","blob","createElement","className","onClick","disabled","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/Roman/Desktop/RBP/frontend/src/components/ExportToWord.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Document, Packer, Paragraph, TextRun } from 'docx';\nimport { saveAs } from 'file-saver';\n\nconst ExportToWord = ({ selectedEmployees }) => {\n    const [jobTypes, setJobTypes] = useState([]);\n    const [departments, setDepartments] = useState([]);\n\n    useEffect(() => {\n        const fetchJobTypes = async () => {\n            try {\n                const response = await fetch('/api/job-types');\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n                const data = await response.json();\n                console.log('Fetched job types:', data);\n                setJobTypes(data);\n            } catch (error) {\n                console.error('Error fetching job types:', error);\n            }\n        };\n\n        const fetchDepartments = async () => {\n            try {\n                const response = await fetch('/api/departments');\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n                const data = await response.json();\n                console.log('Fetched departments:', data);\n                setDepartments(data);\n            } catch (error) {\n                console.error('Error fetching departments:', error);\n            }\n        };\n\n        fetchJobTypes();\n        fetchDepartments();\n    }, []);\n\n    const handleExport = () => {\n        console.log('Selected Employees:', selectedEmployees);\n        console.log('Job Types:', jobTypes);\n        console.log('Departments:', departments);\n\n        if (selectedEmployees.length === 0) {\n            alert(\"Нет выбранных сотрудников для экспорта.\");\n            return;\n        }\n\n        // Создаем документ для каждого выбранного сотрудника\n        const docs = selectedEmployees.map(emp => {\n            const jobType = jobTypes.find(job => job.id === emp.job_type)?.name || 'Unknown Job Type';\n            const department = departments.find(dept => dept.id === emp.department)?.name || 'Unknown Department';\n\n            const doc = new Document({\n                sections: [{\n                    properties: {},\n                    children: [\n                        new Paragraph({\n                            text: `Заявление на отпуск`,\n                            heading: 'Title',\n                        }),\n                        new Paragraph({\n                            text: `Я, ${emp.first_name} ${emp.last_name}, занимающий должность \"${jobType}\" в отделе \"${department}\", прошу предоставить мне отпуск.`,\n                            spacing: { after: 200 },\n                        }),\n                        new Paragraph({\n                            text: `Дата начала отпуска: ____________`,\n                            spacing: { after: 200 },\n                        }),\n                        new Paragraph({\n                            text: `Дата окончания отпуска: ____________`,\n                            spacing: { after: 200 },\n                        }),\n                        new Paragraph({\n                            text: `Подпись: ____________`,\n                            spacing: { after: 200 },\n                        }),\n                        new Paragraph({\n                            text: `Дата генерации документа: ${new Date().toLocaleDateString()}`,\n                            spacing: { after: 200 },\n                        }),\n                    ],\n                }],\n            });\n\n            return doc;\n        });\n\n        // Генерация файлов и скачивание для каждого сотрудника\n        docs.forEach((doc, index) => {\n            Packer.toBlob(doc).then(blob => {\n                saveAs(blob, `employee_${selectedEmployees[index].first_name}_${selectedEmployees[index].last_name}_vacation_request.docx`);\n            });\n        });\n    };\n\n    return (\n        <button className=\"export-button\" onClick={handleExport} disabled={selectedEmployees.length === 0}>\n            Экспорт в Word\n        </button>\n    );\n};\n\nexport default ExportToWord;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}