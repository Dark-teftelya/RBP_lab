{"ast":null,"code":"var _jsxFileName = \"/Users/Roman/Desktop/RBP/frontend/src/components/ExportToWord.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Document, Packer, Paragraph } from 'docx';\nimport { saveAs } from 'file-saver';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nconst ExportToWord = ({\n  selectedEmployees\n}) => {\n  const [jobTypes, setJobTypes] = useState([]);\n  const [departments, setDepartments] = useState([]);\n  const [vacationStartDates, setVacationStartDates] = useState({});\n  const [vacationEndDates, setVacationEndDates] = useState({});\n  useEffect(() => {\n    const fetchJobTypes = async () => {\n      try {\n        const response = await fetch('http://localhost:8000/api/job-types/');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setJobTypes(data);\n      } catch (error) {\n        console.error('Error fetching job types:', error);\n      }\n    };\n    const fetchDepartments = async () => {\n      try {\n        const response = await fetch('http://localhost:8000/api/departments/');\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const data = await response.json();\n        setDepartments(data);\n      } catch (error) {\n        console.error('Error fetching departments:', error);\n      }\n    };\n    fetchJobTypes();\n    fetchDepartments();\n  }, []);\n  const handleStartDateChange = (employeeId, date) => {\n    setVacationStartDates(prev => ({\n      ...prev,\n      [employeeId]: date\n    }));\n    console.log('Start Date Changed:', employeeId, date); // Log for debugging\n  };\n  const handleEndDateChange = (employeeId, date) => {\n    setVacationEndDates(prev => ({\n      ...prev,\n      [employeeId]: date\n    }));\n    console.log('End Date Changed:', employeeId, date); // Log for debugging\n  };\n  const handleExport = () => {\n    if (selectedEmployees.length === 0) {\n      alert(\"Нет выбранных сотрудников для экспорта.\");\n      return;\n    }\n\n    // Логирование перед экспортом\n    console.log('Selected Employees:', selectedEmployees);\n    console.log('Vacation Start Dates:', vacationStartDates);\n    console.log('Vacation End Dates:', vacationEndDates);\n    const docs = selectedEmployees.map(emp => {\n      var _jobTypes$find, _departments$find;\n      const jobType = ((_jobTypes$find = jobTypes.find(job => job.id === emp.job_type)) === null || _jobTypes$find === void 0 ? void 0 : _jobTypes$find.name) || 'Не указано';\n      const department = ((_departments$find = departments.find(dept => dept.id === emp.department)) === null || _departments$find === void 0 ? void 0 : _departments$find.name) || 'Не указано';\n      const vacationStart = vacationStartDates[emp.id] ? vacationStartDates[emp.id].toLocaleDateString() : 'Не указано';\n      const vacationEnd = vacationEndDates[emp.id] ? vacationEndDates[emp.id].toLocaleDateString() : 'Не указано';\n      console.log('Creating document for:', emp.first_name, emp.last_name); // Log for debugging\n\n      const doc = new Document({\n        sections: [{\n          properties: {},\n          children: [new Paragraph({\n            text: `Заявление на отпуск`,\n            heading: 'Title'\n          }), new Paragraph({\n            text: `Я, ${emp.first_name} ${emp.last_name}, занимающий должность \"${jobType}\" в отделе \"${department}\", прошу предоставить мне отпуск.`,\n            spacing: {\n              after: 200\n            }\n          }), new Paragraph({\n            text: `Дата начала отпуска: ${vacationStart}`,\n            spacing: {\n              after: 200\n            }\n          }), new Paragraph({\n            text: `Дата окончания отпуска: ${vacationEnd}`,\n            spacing: {\n              after: 200\n            }\n          }), new Paragraph({\n            text: `Подпись: ____________`,\n            spacing: {\n              after: 200\n            }\n          }), new Paragraph({\n            text: `Дата генерации документа: ${new Date().toLocaleDateString()}`,\n            spacing: {\n              after: 200\n            }\n          })]\n        }]\n      });\n      return doc;\n    });\n    docs.forEach((doc, index) => {\n      Packer.toBlob(doc).then(blob => {\n        saveAs(blob, `employee_${selectedEmployees[index].first_name}_${selectedEmployees[index].last_name}_vacation_request.docx`);\n      });\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"export-button\",\n    onClick: handleExport,\n    disabled: selectedEmployees.length === 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, \"\\u042D\\u043A\\u0441\\u043F\\u043E\\u0440\\u0442 \\u0432 Word\");\n};\nexport default ExportToWord;","map":{"version":3,"names":["React","useEffect","useState","Document","Packer","Paragraph","saveAs","DatePicker","ExportToWord","selectedEmployees","jobTypes","setJobTypes","departments","setDepartments","vacationStartDates","setVacationStartDates","vacationEndDates","setVacationEndDates","fetchJobTypes","response","fetch","ok","Error","data","json","error","console","fetchDepartments","handleStartDateChange","employeeId","date","prev","log","handleEndDateChange","handleExport","length","alert","docs","map","emp","_jobTypes$find","_departments$find","jobType","find","job","id","job_type","name","department","dept","vacationStart","toLocaleDateString","vacationEnd","first_name","last_name","doc","sections","properties","children","text","heading","spacing","after","Date","forEach","index","toBlob","then","blob","createElement","className","onClick","disabled","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/Roman/Desktop/RBP/frontend/src/components/ExportToWord.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Document, Packer, Paragraph } from 'docx';\nimport { saveAs } from 'file-saver';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\n\nconst ExportToWord = ({ selectedEmployees }) => {\n    const [jobTypes, setJobTypes] = useState([]);\n    const [departments, setDepartments] = useState([]);\n    const [vacationStartDates, setVacationStartDates] = useState({});\n    const [vacationEndDates, setVacationEndDates] = useState({});\n\n    useEffect(() => {\n        const fetchJobTypes = async () => {\n            try {\n                const response = await fetch('http://localhost:8000/api/job-types/');\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n                const data = await response.json();\n                setJobTypes(data);\n            } catch (error) {\n                console.error('Error fetching job types:', error);\n            }\n        };\n\n        const fetchDepartments = async () => {\n            try {\n                const response = await fetch('http://localhost:8000/api/departments/');\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n                const data = await response.json();\n                setDepartments(data);\n            } catch (error) {\n                console.error('Error fetching departments:', error);\n            }\n        };\n\n        fetchJobTypes();\n        fetchDepartments();\n    }, []);\n\n    const handleStartDateChange = (employeeId, date) => {\n        setVacationStartDates(prev => ({ ...prev, [employeeId]: date }));\n        console.log('Start Date Changed:', employeeId, date); // Log for debugging\n    };\n\n    const handleEndDateChange = (employeeId, date) => {\n        setVacationEndDates(prev => ({ ...prev, [employeeId]: date }));\n        console.log('End Date Changed:', employeeId, date); // Log for debugging\n    };\n\n    const handleExport = () => {\n        if (selectedEmployees.length === 0) {\n            alert(\"Нет выбранных сотрудников для экспорта.\");\n            return;\n        }\n\n          // Логирование перед экспортом\n        console.log('Selected Employees:', selectedEmployees);\n        console.log('Vacation Start Dates:', vacationStartDates);\n        console.log('Vacation End Dates:', vacationEndDates);\n\n        const docs = selectedEmployees.map(emp => {\n            const jobType = jobTypes.find(job => job.id === emp.job_type)?.name || 'Не указано';\n            const department = departments.find(dept => dept.id === emp.department)?.name || 'Не указано';\n\n            const vacationStart = vacationStartDates[emp.id] ? vacationStartDates[emp.id].toLocaleDateString() : 'Не указано';\n            const vacationEnd = vacationEndDates[emp.id] ? vacationEndDates[emp.id].toLocaleDateString() : 'Не указано';\n\n            console.log('Creating document for:', emp.first_name, emp.last_name); // Log for debugging\n\n            const doc = new Document({\n                sections: [{\n                    properties: {},\n                    children: [\n                        new Paragraph({\n                            text: `Заявление на отпуск`,\n                            heading: 'Title',\n                        }),\n                        new Paragraph({\n                            text: `Я, ${emp.first_name} ${emp.last_name}, занимающий должность \"${jobType}\" в отделе \"${department}\", прошу предоставить мне отпуск.`,\n                            spacing: { after: 200 },\n                        }),\n                        new Paragraph({\n                            text: `Дата начала отпуска: ${vacationStart}`,\n                            spacing: { after: 200 },\n                        }),\n                        new Paragraph({\n                            text: `Дата окончания отпуска: ${vacationEnd}`,\n                            spacing: { after: 200 },\n                        }),\n                        new Paragraph({\n                            text: `Подпись: ____________`,\n                            spacing: { after: 200 },\n                        }),\n                        new Paragraph({\n                            text: `Дата генерации документа: ${new Date().toLocaleDateString()}`,\n                            spacing: { after: 200 },\n                        }),\n                    ],\n                }],\n            });\n\n            return doc;\n        });\n\n        docs.forEach((doc, index) => {\n            Packer.toBlob(doc).then(blob => {\n                saveAs(blob, `employee_${selectedEmployees[index].first_name}_${selectedEmployees[index].last_name}_vacation_request.docx`);\n            });\n        });\n    };\n\n    return (\n        <button className=\"export-button\" onClick={handleExport} disabled={selectedEmployees.length === 0}>\n            Экспорт в Word\n        </button>\n    );\n};\n\nexport default ExportToWord;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}