{"ast":null,"code":"import React,{useEffect,useState}from'react';import axios from'axios';import'./EmployeeList.css';import'./ScrollToTopButton.css';import'./export.css';import DatePicker from'react-datepicker';// Импортируем DatePicker\nimport'react-datepicker/dist/react-datepicker.css';// Импортируем стили для DatePicker\nimport FilterComp from'./FilterComp';import ExportToWord from'./ExportToWord';import{Document,Packer,Paragraph,Table,TableRow,TableCell,WidthType}from'docx';import{utils,writeFile}from'xlsx';import{saveAs}from'file-saver';const EmployeeList=()=>{const[employees,setEmployees]=useState([]);const[jobTypes,setJobTypes]=useState([]);const[departments,setDepartments]=useState([]);// Состояние для модального окна\nconst[isModalOpen,setIsModalOpen]=useState(false);const[employeeToEdit,setEmployeeToEdit]=useState(null);const[editedEmployee,setEditedEmployee]=useState({first_name:'',last_name:'',salary:'',job_type:'',department:''});const[editedJobType,setEditedJobType]=useState({});const[editedDepartment,setEditedDepartment]=useState({});const[isEditJobTypeModalOpen,setIsEditJobTypeModalOpen]=useState(false);const[isEditDepartmentModalOpen,setIsEditDepartmentModalOpen]=useState(false);const[newEmployee,setNewEmployee]=useState({first_name:'',last_name:'',salary:'',job_type:'',department:''});const[newJobType,setNewJobType]=useState({name:''});const[newDepartment,setNewDepartment]=useState({name:''});const[selectedEmployees,setSelectedEmployees]=useState([]);const handleSelectEmployee=employee=>{setSelectedEmployees(prevSelected=>{if(prevSelected.includes(employee)){return prevSelected.filter(emp=>emp!==employee);// Убираем, если уже выбран\n}else{return[...prevSelected,employee];// Добавляем, если не выбран\n}});};const[vacationStartDates,setVacationStartDates]=useState({});const[vacationEndDates,setVacationEndDates]=useState({});// Обработчики изменений дат начала и окончания отпуска\nconst handleStartDateChange=(employeeId,date)=>{setVacationStartDates(prev=>({...prev,[employeeId]:date}));console.log(`Start date for employee ${employeeId}:`,date);// Debugging log\n};const handleEndDateChange=(employeeId,date)=>{setVacationEndDates(prev=>({...prev,[employeeId]:date}));console.log(`End date for employee ${employeeId}:`,date);// Debugging log\n};// Новая функция для экспорта в docx\nconst handleExportEmployees=()=>{const doc=new Document({sections:[{properties:{},children:[new Paragraph({text:'Employee List',heading:'Title'}),new Table({rows:[new TableRow({children:[new TableCell({children:[new Paragraph('First Name')],width:{size:25,type:WidthType.PERCENTAGE}}),new TableCell({children:[new Paragraph('Last Name')],width:{size:25,type:WidthType.PERCENTAGE}}),new TableCell({children:[new Paragraph('Salary')],width:{size:25,type:WidthType.PERCENTAGE}}),new TableCell({children:[new Paragraph('Job Type')],width:{size:25,type:WidthType.PERCENTAGE}}),new TableCell({children:[new Paragraph('Department')],width:{size:25,type:WidthType.PERCENTAGE}})]}),...employees.map(emp=>{var _emp$salary,_jobTypes$find,_departments$find;return new TableRow({children:[new TableCell({children:[new Paragraph(emp.first_name||'')]}),new TableCell({children:[new Paragraph(emp.last_name||'')]}),new TableCell({children:[new Paragraph(((_emp$salary=emp.salary)===null||_emp$salary===void 0?void 0:_emp$salary.toString())||'')]}),new TableCell({children:[new Paragraph(((_jobTypes$find=jobTypes.find(job=>job.id===emp.job_type))===null||_jobTypes$find===void 0?void 0:_jobTypes$find.name)||'Unknown Job Type')]}),new TableCell({children:[new Paragraph(((_departments$find=departments.find(dept=>dept.id===emp.department))===null||_departments$find===void 0?void 0:_departments$find.name)||'Unknown Department')]})]});})]})]}]});// Генерация файла и скачивание\nPacker.toBlob(doc).then(blob=>{saveAs(blob,'employees.docx');});};const handleExportJobTypes=()=>{const doc=new Document({sections:[{properties:{},children:[new Paragraph({text:'JobType List',heading:'Title'}),new Table({rows:[new TableRow({children:[new TableCell({children:[new Paragraph('Name')],width:{size:25,type:WidthType.PERCENTAGE}})]}),...jobTypes.map(emp=>new TableRow({children:[new TableCell({children:[new Paragraph(emp.name)]})]}))]})]}]});// Генерация файла и скачивание\nPacker.toBlob(doc).then(blob=>{saveAs(blob,'jobtypes.docx');});};//экспорт эксель\nconst handleExportEmployeesToExcel=()=>{// Формируем данные для Excel\nconst employeeData=employees.map(emp=>{var _emp$salary2,_jobTypes$find2,_departments$find2;return{\"First Name\":emp.first_name||'',\"Last Name\":emp.last_name||'',\"Salary\":((_emp$salary2=emp.salary)===null||_emp$salary2===void 0?void 0:_emp$salary2.toString())||'',\"Job Type\":((_jobTypes$find2=jobTypes.find(job=>job.id===emp.job_type))===null||_jobTypes$find2===void 0?void 0:_jobTypes$find2.name)||'Unknown Job Type',\"Department\":((_departments$find2=departments.find(dept=>dept.id===emp.department))===null||_departments$find2===void 0?void 0:_departments$find2.name)||'Unknown Department'};});// Создаем рабочий лист\nconst worksheet=utils.json_to_sheet(employeeData);// Создаем рабочую книгу\nconst workbook=utils.book_new();utils.book_append_sheet(workbook,worksheet,\"Employees\");// Генерация и скачивание файла\nwriteFile(workbook,'employees.xlsx');};const handleExportJobTypesToExcel=()=>{// Формируем данные для Excel\nconst jobTypeData=jobTypes.map(jobType=>({\"Job Type Name\":jobType.name}));// Создаем рабочий лист\nconst worksheet=utils.json_to_sheet(jobTypeData);// Создаем рабочую книгу\nconst workbook=utils.book_new();utils.book_append_sheet(workbook,worksheet,\"Job Types\");// Генерация и скачивание файла\nwriteFile(workbook,'jobtypes.xlsx');};useEffect(()=>{// Запрос к API на Django для получения списка сотрудников\naxios.get('http://localhost:8000/api/employees/').then(res=>{setEmployees(res.data);}).catch(err=>{console.error(err);});// Запрос к API для получения списка типов работы\naxios.get('http://localhost:8000/api/job-types/').then(res=>{setJobTypes(res.data);}).catch(err=>{console.error(err);});// Получение данных отделов\naxios.get('http://localhost:8000/api/departments/').then(res=>{setDepartments(res.data);}).catch(err=>{console.error(err);});},[]);// Функция для удаления сотрудника\nconst handleDeleteEmployee=id=>{axios.delete(`http://localhost:8000/api/employees/${id}/`).then(()=>{setEmployees(employees.filter(employee=>employee.id!==id));}).catch(err=>{console.error(err);});};// Функция для добавления нового сотрудника\nconst handleAddEmployee=e=>{e.preventDefault();if(!newEmployee.first_name||!newEmployee.last_name||!newEmployee.salary||!newEmployee.job_type){console.error('All fields are required');return;}axios.post('http://localhost:8000/api/employees/',newEmployee).then(res=>{setEmployees([...employees,res.data]);setNewEmployee({first_name:'',last_name:'',salary:'',job_type:'',department:''});}).catch(err=>{console.error(err.response.data);});};// Функция для добавления нового типа работы\nconst handleAddJobType=e=>{e.preventDefault();axios.post('http://localhost:8000/api/job-types/',newJobType).then(res=>{setJobTypes([...jobTypes,res.data]);// Обновляем список типов работы\nsetNewJobType({name:''});// Очищаем поля ввода\n}).catch(err=>{console.error(err);});};// Функция для удаления типа работы\nconst handleDeleteJobType=id=>{axios.delete(`http://localhost:8000/api/job-types/${id}/`).then(()=>{setJobTypes(jobTypes.filter(jobType=>jobType.id!==id));}).catch(err=>{console.error(err);});};const handleAddDepartment=e=>{e.preventDefault();axios.post('http://localhost:8000/api/departments/',newDepartment).then(res=>{setDepartments([...departments,res.data]);// Обновляем список отделов\nsetNewDepartment({name:''});// Очищаем поля ввода\n}).catch(err=>{console.error(err);});};const handleDeleteDepartment=id=>{axios.delete(`http://localhost:8000/api/departments/${id}/`).then(()=>{setDepartments(departments.filter(department=>department.id!==id));}).catch(err=>{console.error(err);});};// Открытие модального окна для редактирования сотрудников\nconst handleEditEmployee=id=>{const employee=employees.find(emp=>emp.id===id);if(employee){setEmployeeToEdit(employee);setEditedEmployee({first_name:employee.first_name,last_name:employee.last_name,salary:employee.salary,job_type:employee.job_type,department:employee.department});setIsModalOpen(true);}};// Закрытие модального окна\nconst closeModal=()=>{setIsModalOpen(false);setEmployeeToEdit(null);};// Обновление данных сотрудника при изменении в модальной форме\nconst handleInputChange=e=>{const{name,value}=e.target;setEditedEmployee({...editedEmployee,[name]:value});};// Сохранение изменений сотрудника\nconst handleSaveChanges=()=>{axios.put(`http://localhost:8000/api/employees/${employeeToEdit.id}/`,editedEmployee).then(()=>{// Обновляем список сотрудников\nsetEmployees(employees.map(emp=>emp.id===employeeToEdit.id?editedEmployee:emp));closeModal();}).catch(err=>{console.error(err);});};// Открытие модального окна для редактирования типа работы\nconst handleEditJobType=id=>{const jobType=jobTypes.find(jobType=>jobType.id===id);if(jobType){setEditedJobType(jobType);setIsEditJobTypeModalOpen(true);}};// Закрытие модального окна для редактирования типа работы\nconst closeEditJobTypeModal=()=>{setIsEditJobTypeModalOpen(false);// Закрываем модальное окно\nsetEditedJobType({});// Сбрасываем редактируемый тип работы\n};// Сохранение изменений типа работы\nconst handleEditJobTypeSubmit=e=>{e.preventDefault();axios.put(`http://localhost:8000/api/job-types/${editedJobType.id}/`,{name:editedJobType.name}).then(response=>{const updatedJobType=response.data;// Получаем обновленный тип работы из ответа сервера\nsetJobTypes(prevJobTypes=>prevJobTypes.map(jobType=>jobType.id===updatedJobType.id?updatedJobType:jobType));closeEditJobTypeModal();// Закрытие модального окна\n}).catch(error=>{var _error$response,_error$response$data;console.error('Ошибка:',error);alert('Произошла ошибка при обновлении типа работы: '+(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||error.message));});};// Открытие модального окна для редактирования отдела\nconst handleEditDepartment=id=>{const department=departments.find(dep=>dep.id===id);if(department){setEditedDepartment(department);setIsEditDepartmentModalOpen(true);// Открываем модальное окно\n}};// Закрытие модального окна для редактирования отдела\nconst closeEditDepartmentModal=()=>{setIsEditDepartmentModalOpen(false);// Закрываем модальное окно\nsetEditedDepartment({});// Сбрасываем редактируемый отдел\n};// Обновление отдела\nconst handleEditDepartmentSubmit=e=>{e.preventDefault();axios.put(`http://localhost:8000/api/departments/${editedDepartment.id}/`,{name:editedDepartment.name}).then(response=>{const updatedDepartment=response.data;// Получаем обновленный отдел из ответа сервера\nsetDepartments(prevDepartments=>prevDepartments.map(dep=>dep.id===updatedDepartment.id?updatedDepartment:dep));closeEditDepartmentModal();// Закрытие модального окна\n}).catch(error=>{var _error$response2,_error$response2$data;console.error('Ошибка:',error);alert('Произошла ошибка при обновлении отдела: '+(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||error.message));});};//скролл вверх\nconst handleScrollToTop=()=>{window.scrollTo({top:0,behavior:'smooth'// Плавная прокрутка\n});};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"header\",{className:\"header\"},/*#__PURE__*/React.createElement(\"div\",{className:\"cube\"},/*#__PURE__*/React.createElement(\"div\",{className:\"side front\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"side back\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"side left\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"side right\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"side top\"}),/*#__PURE__*/React.createElement(\"div\",{className:\"side bottom\"})),/*#__PURE__*/React.createElement(\"h1\",null,\"Employee Management System\"),/*#__PURE__*/React.createElement(\"nav\",null,/*#__PURE__*/React.createElement(\"ul\",null,/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"a\",{href:\"#add-employee\"},\"Add Employee\")),/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"a\",{href:\"#add-job-type\"},\"Add Job Type\")),/*#__PURE__*/React.createElement(\"li\",null,/*#__PURE__*/React.createElement(\"a\",{href:\"#add-department\"},\"Add Department\"))))),/*#__PURE__*/React.createElement(\"main\",null,/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleAddEmployee,className:\"employee-form\",id:\"add-employee\"},/*#__PURE__*/React.createElement(\"h2\",null,\"Add New Employee\"),/*#__PURE__*/React.createElement(\"div\",{className:\"input-field-container\"},/*#__PURE__*/React.createElement(\"input\",{type:\"text\",className:\"input-field\",placeholder:\" \",value:newEmployee.first_name,onChange:e=>setNewEmployee({...newEmployee,first_name:e.target.value}),required:true,id:\"first-name\"}),/*#__PURE__*/React.createElement(\"label\",{className:\"label\",htmlFor:\"first-name\"},\"First Name\")),/*#__PURE__*/React.createElement(\"div\",{className:\"input-field-container\"},/*#__PURE__*/React.createElement(\"input\",{type:\"text\",className:\"input-field\",placeholder:\" \",value:newEmployee.last_name,onChange:e=>setNewEmployee({...newEmployee,last_name:e.target.value}),required:true,id:\"last-name\"}),/*#__PURE__*/React.createElement(\"label\",{className:\"label\",htmlFor:\"last-name\"},\"Last Name\")),/*#__PURE__*/React.createElement(\"div\",{className:\"input-field-container\"},/*#__PURE__*/React.createElement(\"input\",{type:\"number\",className:\"input-field\",placeholder:\" \",value:newEmployee.salary,onChange:e=>setNewEmployee({...newEmployee,salary:e.target.value}),required:true,id:\"salary\"}),/*#__PURE__*/React.createElement(\"label\",{className:\"label\",htmlFor:\"salary\"},\"Salary\")),/*#__PURE__*/React.createElement(\"div\",{className:\"input-field-container\"},/*#__PURE__*/React.createElement(\"select\",{className:\"select-field\",value:newEmployee.job_type,onChange:e=>setNewEmployee({...newEmployee,job_type:e.target.value}),required:true},/*#__PURE__*/React.createElement(\"option\",{value:\"\",disabled:true,hidden:true},\"Select Job Type\"),jobTypes.map(jobType=>/*#__PURE__*/React.createElement(\"option\",{key:jobType.id,value:jobType.id},jobType.name))),/*#__PURE__*/React.createElement(\"label\",{className:\"label\",htmlFor:\"job-type\"},\"Job Type\")),/*#__PURE__*/React.createElement(\"div\",{className:\"input-field-container\"},/*#__PURE__*/React.createElement(\"select\",{className:\"select-field\",value:newEmployee.department,onChange:e=>setNewEmployee({...newEmployee,department:e.target.value}),required:true},/*#__PURE__*/React.createElement(\"option\",{value:\"\",disabled:true,hidden:true},\"Select Department\"),departments.map(department=>/*#__PURE__*/React.createElement(\"option\",{key:department.id,value:department.id},department.name))),/*#__PURE__*/React.createElement(\"label\",{className:\"label\",htmlFor:\"department\"},\"Department\")),/*#__PURE__*/React.createElement(\"button\",{type:\"submit\",className:\"export-button\"},\"Add Employee\")),isModalOpen&&/*#__PURE__*/React.createElement(\"div\",{className:\"modal\"},/*#__PURE__*/React.createElement(\"div\",{className:\"modal-content\"},/*#__PURE__*/React.createElement(\"h2\",null,\"Edit Employee\"),/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleSaveChanges},/*#__PURE__*/React.createElement(\"input\",{type:\"text\",name:\"first_name\",placeholder:\"First Name\",value:editedEmployee.first_name,onChange:handleInputChange,required:true}),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",name:\"last_name\",placeholder:\"Last Name\",value:editedEmployee.last_name,onChange:handleInputChange,required:true}),/*#__PURE__*/React.createElement(\"input\",{type:\"number\",name:\"salary\",placeholder:\"Salary\",value:editedEmployee.salary,onChange:handleInputChange,required:true}),/*#__PURE__*/React.createElement(\"select\",{name:\"job_type\",value:editedEmployee.job_type,onChange:handleInputChange,required:true},/*#__PURE__*/React.createElement(\"option\",{value:\"\"},\"Select Job Type\"),jobTypes.map(jobType=>/*#__PURE__*/React.createElement(\"option\",{key:jobType.id,value:jobType.id},jobType.name))),/*#__PURE__*/React.createElement(\"select\",{name:\"department\",value:editedEmployee.department,onChange:handleInputChange,required:true},/*#__PURE__*/React.createElement(\"option\",{value:\"\"},\"Select Department\"),departments.map(dept=>/*#__PURE__*/React.createElement(\"option\",{key:dept.id,value:dept.id},dept.name))),/*#__PURE__*/React.createElement(\"button\",{type:\"submit\"},\"Save Changes\"),/*#__PURE__*/React.createElement(\"button\",{type:\"button\",onClick:closeModal},\"Cancel\")))),/*#__PURE__*/React.createElement(\"table\",{className:\"styled-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"First Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Last Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Salary\"),/*#__PURE__*/React.createElement(\"th\",null,\"Job Type\"),/*#__PURE__*/React.createElement(\"th\",null,\"Department\"),\" \",/*#__PURE__*/React.createElement(\"th\",null,\"Actions\"))),/*#__PURE__*/React.createElement(\"tbody\",null,employees.map(employee=>{var _jobTypes$find3,_departments$find3;return/*#__PURE__*/React.createElement(\"tr\",{key:employee.id},/*#__PURE__*/React.createElement(\"td\",null,employee.first_name),/*#__PURE__*/React.createElement(\"td\",null,employee.last_name),/*#__PURE__*/React.createElement(\"td\",null,employee.salary),/*#__PURE__*/React.createElement(\"td\",null,((_jobTypes$find3=jobTypes.find(job=>job.id===employee.job_type))===null||_jobTypes$find3===void 0?void 0:_jobTypes$find3.name)||'Unknown Job Type'),/*#__PURE__*/React.createElement(\"td\",null,((_departments$find3=departments.find(dept=>dept.id===employee.department))===null||_departments$find3===void 0?void 0:_departments$find3.name)||'Unknown Department'),/*#__PURE__*/React.createElement(\"td\",null,/*#__PURE__*/React.createElement(\"button\",{className:\"edit-button\",onClick:()=>handleEditEmployee(employee.id)},\" \",/*#__PURE__*/React.createElement(\"span\",{role:\"img\",\"aria-label\":\"\\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\"},\"\\u270F\\uFE0F\")),/*#__PURE__*/React.createElement(\"button\",{className:\"delete-button\",onClick:()=>handleDeleteEmployee(employee.id)},/*#__PURE__*/React.createElement(\"span\",{role:\"img\",\"aria-label\":\"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"},\"\\uD83D\\uDDD1\\uFE0F\"))));}))),/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleAddJobType,className:\"job-type-form\",id:\"add-job-type\"},/*#__PURE__*/React.createElement(\"h2\",null,\"Add New Job Type\"),/*#__PURE__*/React.createElement(\"div\",{className:\"input-field-container\"},/*#__PURE__*/React.createElement(\"input\",{type:\"text\",className:\"input-field\"// Добавьте класс для стилей\n,placeholder:\" \"// Оставьте пробел для использования метки\n,value:newJobType.name,onChange:e=>setNewJobType({name:e.target.value}),required:true,id:\"job-type-name\"// Уникальный ID для метки\n}),/*#__PURE__*/React.createElement(\"label\",{className:\"label\",htmlFor:\"job-type-name\"},\"Job Type Name\"),\" \",/*#__PURE__*/React.createElement(\"button\",{className:\"export-button\",type:\"submit\"},\"Add Job Type\"))),isEditJobTypeModalOpen&&/*#__PURE__*/React.createElement(\"div\",{className:\"modal\"},/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleEditJobTypeSubmit},/*#__PURE__*/React.createElement(\"h2\",null,\"\\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C \\u0442\\u0438\\u043F \\u0440\\u0430\\u0431\\u043E\\u0442\\u044B\"),/*#__PURE__*/React.createElement(\"div\",{className:\"input-field-container\"},/*#__PURE__*/React.createElement(\"input\",{type:\"text\",className:\"input-field\",value:editedJobType.name||'',onChange:e=>setEditedJobType({...editedJobType,name:e.target.value}),placeholder:\"\\u0418\\u043C\\u044F \\u0442\\u0438\\u043F\\u0430 \\u0440\\u0430\\u0431\\u043E\\u0442\\u044B\"}),/*#__PURE__*/React.createElement(\"button\",{class:\"export-button\",type:\"submit\"},\"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C \\u0438\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u044F\"),/*#__PURE__*/React.createElement(\"button\",{class:\"export-button\",type:\"button\",onClick:closeEditJobTypeModal},\"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C\")))),/*#__PURE__*/React.createElement(\"table\",{className:\"styled-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Job Type\"),/*#__PURE__*/React.createElement(\"th\",null,\"Actions\"))),/*#__PURE__*/React.createElement(\"tbody\",null,jobTypes.map(jobType=>/*#__PURE__*/React.createElement(\"tr\",{key:jobType.id},/*#__PURE__*/React.createElement(\"td\",null,jobType.name),/*#__PURE__*/React.createElement(\"td\",null,/*#__PURE__*/React.createElement(\"button\",{className:\"edit-button\",onClick:()=>handleEditJobType(jobType.id)},/*#__PURE__*/React.createElement(\"span\",{role:\"img\",\"aria-label\":\"\\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\"},\"\\u270F\\uFE0F\")),/*#__PURE__*/React.createElement(\"button\",{className:\"delete-button\",onClick:()=>handleDeleteJobType(jobType.id)},/*#__PURE__*/React.createElement(\"span\",{role:\"img\",\"aria-label\":\"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"},\"\\uD83D\\uDDD1\\uFE0F\"))))))),/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleAddDepartment,className:\"department-form\",id:\"add-department\"},/*#__PURE__*/React.createElement(\"h2\",null,\"Add New Department\"),/*#__PURE__*/React.createElement(\"div\",{className:\"input-field-container\"},/*#__PURE__*/React.createElement(\"input\",{type:\"text\",className:\"input-field\",placeholder:\" \",value:newDepartment.name,onChange:e=>setNewDepartment({name:e.target.value}),required:true}),/*#__PURE__*/React.createElement(\"label\",{className:\"label\",htmlFor:\"job-type-name\"},\"Department Name\"),/*#__PURE__*/React.createElement(\"button\",{class:\"export-button\",type:\"submit\"},\"Add Department\"))),isEditDepartmentModalOpen&&/*#__PURE__*/React.createElement(\"div\",{className:\"modal\"},/*#__PURE__*/React.createElement(\"form\",{onSubmit:handleEditDepartmentSubmit},/*#__PURE__*/React.createElement(\"h2\",null,\"\\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C \\u043E\\u0442\\u0434\\u0435\\u043B\"),/*#__PURE__*/React.createElement(\"div\",{className:\"input-field-container\"},/*#__PURE__*/React.createElement(\"input\",{type:\"text\",className:\"input-field\",value:editedDepartment.name,onChange:e=>setEditedDepartment({...editedDepartment,name:e.target.value}),placeholder:\"\\u0418\\u043C\\u044F \\u043E\\u0442\\u0434\\u0435\\u043B\\u0430\"}),/*#__PURE__*/React.createElement(\"button\",{class:\"export-button\",type:\"submit\"},\"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C \\u0438\\u0437\\u043C\\u0435\\u043D\\u0435\\u043D\\u0438\\u044F\"),/*#__PURE__*/React.createElement(\"button\",{class:\"export-button\",type:\"button\",onClick:closeEditDepartmentModal},\"\\u0417\\u0430\\u043A\\u0440\\u044B\\u0442\\u044C\")))),/*#__PURE__*/React.createElement(\"table\",{className:\"styled-table\"},/*#__PURE__*/React.createElement(\"thead\",null,/*#__PURE__*/React.createElement(\"tr\",null,/*#__PURE__*/React.createElement(\"th\",null,\"Department Name\"),/*#__PURE__*/React.createElement(\"th\",null,\"Actions\"))),/*#__PURE__*/React.createElement(\"tbody\",null,departments.map(department=>/*#__PURE__*/React.createElement(\"tr\",{key:department.id},/*#__PURE__*/React.createElement(\"td\",null,department.name),/*#__PURE__*/React.createElement(\"td\",null,/*#__PURE__*/React.createElement(\"button\",{className:\"edit-button\",onClick:()=>handleEditDepartment(department.id)},\" \",/*#__PURE__*/React.createElement(\"span\",{role:\"img\",\"aria-label\":\"\\u0420\\u0435\\u0434\\u0430\\u043A\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\"},\"\\u270F\\uFE0F\")),/*#__PURE__*/React.createElement(\"button\",{className:\"delete-button\",onClick:()=>handleDeleteDepartment(department.id)},/*#__PURE__*/React.createElement(\"span\",{role:\"img\",\"aria-label\":\"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"},\"\\uD83D\\uDDD1\\uFE0F\"))))))),/*#__PURE__*/React.createElement(\"div\",{className:\"export-buttons\"},/*#__PURE__*/React.createElement(\"button\",{className:\"export-button\",onClick:handleExportEmployeesToExcel},\"Export Employees to Excel\"),/*#__PURE__*/React.createElement(\"button\",{className:\"export-button\",onClick:handleExportJobTypesToExcel},\"Export Job Types to Excel\"),/*#__PURE__*/React.createElement(\"button\",{className:\"export-button\",onClick:handleExportEmployees},\"Export Employees to Text File\"),/*#__PURE__*/React.createElement(\"button\",{className:\"export-button\",onClick:handleExportJobTypes},\"Export Job Types to Text File\"))),/*#__PURE__*/React.createElement(\"button\",{className:\"scroll-to-top\",onClick:handleScrollToTop},/*#__PURE__*/React.createElement(\"span\",{role:\"img\",\"aria-label\":\"\\u0432\\u0432\\u0435\\u0440\\u0445\"},\"\\u2B06\\uFE0F\")),/*#__PURE__*/React.createElement(FilterComp,{employees:employees,jobTypes:jobTypes,departments:departments}),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(ExportToWord,{selectedEmployees:selectedEmployees,vacationStartDates:vacationStartDates,vacationEndDates:vacationEndDates,employees:employees,handleSelectEmployee:handleSelectEmployee// Передайте функции для обработки выбора\n,handleStartDateChange:handleStartDateChange,handleEndDateChange:handleEndDateChange})),/*#__PURE__*/React.createElement(\"footer\",{className:\"footer\"},/*#__PURE__*/React.createElement(\"p\",null,\"\\xA9 2024 \\u0430\\u0432\\u0442\\u043E\\u0440\\u0441\\u043A\\u0438\\u0439 \\u043F\\u0440\\u043E\\u0435\\u043A\\u0442 Employee Management System\")));};export default EmployeeList;","map":{"version":3,"names":["React","useEffect","useState","axios","DatePicker","FilterComp","ExportToWord","Document","Packer","Paragraph","Table","TableRow","TableCell","WidthType","utils","writeFile","saveAs","EmployeeList","employees","setEmployees","jobTypes","setJobTypes","departments","setDepartments","isModalOpen","setIsModalOpen","employeeToEdit","setEmployeeToEdit","editedEmployee","setEditedEmployee","first_name","last_name","salary","job_type","department","editedJobType","setEditedJobType","editedDepartment","setEditedDepartment","isEditJobTypeModalOpen","setIsEditJobTypeModalOpen","isEditDepartmentModalOpen","setIsEditDepartmentModalOpen","newEmployee","setNewEmployee","newJobType","setNewJobType","name","newDepartment","setNewDepartment","selectedEmployees","setSelectedEmployees","handleSelectEmployee","employee","prevSelected","includes","filter","emp","vacationStartDates","setVacationStartDates","vacationEndDates","setVacationEndDates","handleStartDateChange","employeeId","date","prev","console","log","handleEndDateChange","handleExportEmployees","doc","sections","properties","children","text","heading","rows","width","size","type","PERCENTAGE","map","_emp$salary","_jobTypes$find","_departments$find","toString","find","job","id","dept","toBlob","then","blob","handleExportJobTypes","handleExportEmployeesToExcel","employeeData","_emp$salary2","_jobTypes$find2","_departments$find2","worksheet","json_to_sheet","workbook","book_new","book_append_sheet","handleExportJobTypesToExcel","jobTypeData","jobType","get","res","data","catch","err","error","handleDeleteEmployee","delete","handleAddEmployee","e","preventDefault","post","response","handleAddJobType","handleDeleteJobType","handleAddDepartment","handleDeleteDepartment","handleEditEmployee","closeModal","handleInputChange","value","target","handleSaveChanges","put","handleEditJobType","closeEditJobTypeModal","handleEditJobTypeSubmit","updatedJobType","prevJobTypes","_error$response","_error$response$data","alert","message","handleEditDepartment","dep","closeEditDepartmentModal","handleEditDepartmentSubmit","updatedDepartment","prevDepartments","_error$response2","_error$response2$data","handleScrollToTop","window","scrollTo","top","behavior","createElement","className","href","onSubmit","placeholder","onChange","required","htmlFor","disabled","hidden","key","onClick","_jobTypes$find3","_departments$find3","role","class"],"sources":["/Users/Roman/Documents/GitHub/RBP_lab/frontend/src/components/EmployeeList.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './EmployeeList.css';\nimport './ScrollToTopButton.css';\nimport './export.css';\nimport DatePicker from 'react-datepicker'; // Импортируем DatePicker\nimport 'react-datepicker/dist/react-datepicker.css'; // Импортируем стили для DatePicker\n\nimport FilterComp from './FilterComp';\nimport ExportToWord from './ExportToWord';\nimport { Document, Packer, Paragraph, Table, TableRow, TableCell, WidthType } from 'docx';\nimport { utils, writeFile } from 'xlsx';\nimport { saveAs } from 'file-saver';\nconst EmployeeList = () => {\n    const [employees, setEmployees] = useState([]);\n    const [jobTypes, setJobTypes] = useState([]);\n    const [departments, setDepartments] = useState([]);\n    \n    // Состояние для модального окна\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [employeeToEdit, setEmployeeToEdit] = useState(null);\n    const [editedEmployee, setEditedEmployee] = useState({\n        first_name: '',\n        last_name: '',\n        salary: '',\n        job_type: '',\n        department: ''\n    });\n\n    const [editedJobType, setEditedJobType] = useState({});\n    const [editedDepartment, setEditedDepartment] = useState({});\n    \n    const [isEditJobTypeModalOpen, setIsEditJobTypeModalOpen] = useState(false);\n    const [isEditDepartmentModalOpen, setIsEditDepartmentModalOpen] = useState(false);\n\n    const [newEmployee, setNewEmployee] = useState({\n        first_name: '',\n        last_name: '',\n        salary: '',\n        job_type: '',\n        department: '',\n    });\n    const [newJobType, setNewJobType] = useState({\n        name: '',\n    });\n    const [newDepartment, setNewDepartment] = useState({\n        name: '' });\n    \n    const [selectedEmployees, setSelectedEmployees] = useState([]);\n\n    const handleSelectEmployee = (employee) => {\n        setSelectedEmployees(prevSelected => {\n            if (prevSelected.includes(employee)) {\n                return prevSelected.filter(emp => emp !== employee); // Убираем, если уже выбран\n            } else {\n                return [...prevSelected, employee]; // Добавляем, если не выбран\n            }\n        });\n    };\n\n    const [vacationStartDates, setVacationStartDates] = useState({});\n    const [vacationEndDates, setVacationEndDates] = useState({});\n\n    // Обработчики изменений дат начала и окончания отпуска\n    const handleStartDateChange = (employeeId, date) => {\n        setVacationStartDates(prev => ({ ...prev, [employeeId]: date }));\n        console.log(`Start date for employee ${employeeId}:`, date); // Debugging log\n    };\n    \n    const handleEndDateChange = (employeeId, date) => {\n        setVacationEndDates(prev => ({ ...prev, [employeeId]: date }));\n        console.log(`End date for employee ${employeeId}:`, date); // Debugging log\n    };\n\n        // Новая функция для экспорта в docx\n    const handleExportEmployees = () => {\n        const doc = new Document({\n            sections: [\n                {\n                    properties: {},\n                    children: [\n                        new Paragraph({\n                            text: 'Employee List',\n                            heading: 'Title',\n                        }),\n                        new Table({\n                            rows: [\n                                new TableRow({\n                                    children: [\n                                        new TableCell({\n                                            children: [new Paragraph('First Name')],\n                                            width: { size: 25, type: WidthType.PERCENTAGE }\n                                        }),\n                                        new TableCell({\n                                            children: [new Paragraph('Last Name')],\n                                            width: { size: 25, type: WidthType.PERCENTAGE }\n                                        }),\n                                        new TableCell({\n                                            children: [new Paragraph('Salary')],\n                                            width: { size: 25, type: WidthType.PERCENTAGE }\n                                        }),\n                                        new TableCell({\n                                            children: [new Paragraph('Job Type')],\n                                            width: { size: 25, type: WidthType.PERCENTAGE }\n                                        }),\n                                        new TableCell({\n                                            children: [new Paragraph('Department')],\n                                            width: { size: 25, type: WidthType.PERCENTAGE }\n                                        }),\n                                    ]\n                                }),\n                                ...employees.map(emp => \n                                    new TableRow({\n                                        children: [\n                                            new TableCell({\n                                                children: [new Paragraph(emp.first_name || '')]\n                                            }),\n                                            new TableCell({\n                                                children: [new Paragraph(emp.last_name || '')]\n                                            }),\n                                            new TableCell({\n                                                children: [new Paragraph(emp.salary?.toString() || '')]\n                                            }),\n                                            new TableCell({\n                                                children: [\n                                                    new Paragraph(\n                                                        jobTypes.find(job => job.id === emp.job_type)?.name || 'Unknown Job Type'\n                                                    )\n                                                ]\n                                            }),\n                                            new TableCell({\n                                                children: [\n                                                    new Paragraph(\n                                                        departments.find(dept => dept.id === emp.department)?.name || 'Unknown Department'\n                                                    )\n                                                ]\n                                            }),\n                                        ]\n                                    })\n                                )\n                            ]\n                        })\n                    ]\n                }\n            ]\n        });\n    \n        // Генерация файла и скачивание\n        Packer.toBlob(doc).then(blob => {\n            saveAs(blob, 'employees.docx');\n        });\n    };\n    \n\n    const handleExportJobTypes = () => {\n        const doc = new Document({\n            sections: [\n                {\n                    properties: {},\n                    children: [\n                        new Paragraph({\n                            text: 'JobType List',\n                            heading: 'Title',\n                        }),\n                        new Table({\n                            rows: [\n                                new TableRow({\n                                    children: [\n                                        new TableCell({\n                                            children: [new Paragraph('Name')],\n                                            width: { size: 25, type: WidthType.PERCENTAGE }\n                                        }),\n                                    ]\n                                }),\n                                ...jobTypes.map(emp => \n                                    new TableRow({\n                                        children: [\n                                            new TableCell({\n                                                children: [new Paragraph(emp.name)]\n                                            }),\n                                        ]\n                                    })\n                                )\n                            ]\n                        })\n                    ]\n                }\n            ]\n        });\n\n          // Генерация файла и скачивание\n        Packer.toBlob(doc).then(blob => {\n            saveAs(blob, 'jobtypes.docx');\n        });\n    };\n\n    //экспорт эксель\n    const handleExportEmployeesToExcel = () => {\n        // Формируем данные для Excel\n        const employeeData = employees.map(emp => ({\n            \"First Name\": emp.first_name || '',\n            \"Last Name\": emp.last_name || '',\n            \"Salary\": emp.salary?.toString() || '',\n            \"Job Type\": jobTypes.find(job => job.id === emp.job_type)?.name || 'Unknown Job Type',\n            \"Department\": departments.find(dept => dept.id === emp.department)?.name || 'Unknown Department',\n        }));\n    \n        // Создаем рабочий лист\n        const worksheet = utils.json_to_sheet(employeeData);\n    \n        // Создаем рабочую книгу\n        const workbook = utils.book_new();\n        utils.book_append_sheet(workbook, worksheet, \"Employees\");\n    \n        // Генерация и скачивание файла\n        writeFile(workbook, 'employees.xlsx');\n    };\n\n    const handleExportJobTypesToExcel = () => {\n        // Формируем данные для Excel\n        const jobTypeData = jobTypes.map(jobType => ({\n            \"Job Type Name\": jobType.name\n        }));\n    \n        // Создаем рабочий лист\n        const worksheet = utils.json_to_sheet(jobTypeData);\n    \n        // Создаем рабочую книгу\n        const workbook = utils.book_new();\n        utils.book_append_sheet(workbook, worksheet, \"Job Types\");\n    \n        // Генерация и скачивание файла\n        writeFile(workbook, 'jobtypes.xlsx');\n    };\n    \n\n    useEffect(() => {\n        // Запрос к API на Django для получения списка сотрудников\n        axios.get('http://localhost:8000/api/employees/')\n            .then(res => {\n                setEmployees(res.data);\n            })\n            .catch(err => {\n                console.error(err);\n            });\n\n        // Запрос к API для получения списка типов работы\n        axios.get('http://localhost:8000/api/job-types/')\n            .then(res => {\n                setJobTypes(res.data);\n            })\n            .catch(err => {\n                console.error(err);\n            });\n\n         // Получение данных отделов\n        axios.get('http://localhost:8000/api/departments/')\n            .then(res => {\n                setDepartments(res.data);\n            })\n            .catch(err => {\n                console.error(err);\n            });\n\n    }, []);\n\n    // Функция для удаления сотрудника\n    const handleDeleteEmployee = (id) => {\n        axios.delete(`http://localhost:8000/api/employees/${id}/`)\n            .then(() => {\n                setEmployees(employees.filter(employee => employee.id !== id));\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    };\n\n    // Функция для добавления нового сотрудника\n    const handleAddEmployee = (e) => {\n        e.preventDefault();\n    \n        if (!newEmployee.first_name || !newEmployee.last_name || !newEmployee.salary || !newEmployee.job_type) {\n            console.error('All fields are required');\n            return;\n        }\n    \n        axios.post('http://localhost:8000/api/employees/', newEmployee)\n            .then((res) => {\n                setEmployees([...employees, res.data]);\n                setNewEmployee({ first_name: '', last_name: '', salary: '', job_type: '', department: '' });\n                \n            })\n            .catch(err => {\n                console.error(err.response.data);\n                \n            });\n    };\n    \n\n    // Функция для добавления нового типа работы\n    const handleAddJobType = (e) => {\n        e.preventDefault();\n\n        axios.post('http://localhost:8000/api/job-types/', newJobType)\n            .then((res) => {\n                setJobTypes([...jobTypes, res.data]); // Обновляем список типов работы\n                setNewJobType({ name: '' }); // Очищаем поля ввода\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    };\n\n    // Функция для удаления типа работы\n    const handleDeleteJobType = (id) => {\n        axios.delete(`http://localhost:8000/api/job-types/${id}/`)\n            .then(() => {\n                setJobTypes(jobTypes.filter(jobType => jobType.id !== id));\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    };\n\n    const handleAddDepartment = (e) => {\n        e.preventDefault();\n        axios.post('http://localhost:8000/api/departments/', newDepartment)\n            .then((res) => {\n                setDepartments([...departments, res.data]); // Обновляем список отделов\n                setNewDepartment({ name: '' }); // Очищаем поля ввода\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    };\n    \n    const handleDeleteDepartment = (id) => {\n        axios.delete(`http://localhost:8000/api/departments/${id}/`)\n            .then(() => {\n                setDepartments(departments.filter(department => department.id !== id));\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    };\n\n    // Открытие модального окна для редактирования сотрудников\n    const handleEditEmployee = (id) => {\n        const employee = employees.find(emp => emp.id === id);\n        if (employee) {\n            setEmployeeToEdit(employee);\n            setEditedEmployee({\n                first_name: employee.first_name,\n                last_name: employee.last_name,\n                salary: employee.salary,\n                job_type: employee.job_type,\n                department: employee.department\n            });\n            setIsModalOpen(true);\n        }\n    };\n\n    // Закрытие модального окна\n    const closeModal = () => {\n        setIsModalOpen(false);\n        setEmployeeToEdit(null);\n    };\n\n    // Обновление данных сотрудника при изменении в модальной форме\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n        setEditedEmployee({\n            ...editedEmployee,\n            [name]: value\n        });\n    };\n\n    // Сохранение изменений сотрудника\n    const handleSaveChanges = () => {\n        axios.put(`http://localhost:8000/api/employees/${employeeToEdit.id}/`, editedEmployee)\n            .then(() => {\n                // Обновляем список сотрудников\n                setEmployees(employees.map(emp => emp.id === employeeToEdit.id ? editedEmployee : emp));\n                closeModal();\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    };\n\n    // Открытие модального окна для редактирования типа работы\n    const handleEditJobType = (id) => {\n        const jobType = jobTypes.find(jobType => jobType.id === id);\n        if (jobType) {\n            setEditedJobType(jobType); \n            setIsEditJobTypeModalOpen(true);\n        }\n    }; \n\n    // Закрытие модального окна для редактирования типа работы\n    const closeEditJobTypeModal = () => {\n        setIsEditJobTypeModalOpen(false); // Закрываем модальное окно\n        setEditedJobType({}); // Сбрасываем редактируемый тип работы\n    };\n\n    // Сохранение изменений типа работы\n    const handleEditJobTypeSubmit = (e) => {\n        e.preventDefault();\n\n        axios.put(`http://localhost:8000/api/job-types/${editedJobType.id}/`, {\n            name: editedJobType.name,\n        })\n        .then((response) => {\n            const updatedJobType = response.data; // Получаем обновленный тип работы из ответа сервера\n            setJobTypes((prevJobTypes) =>\n                prevJobTypes.map((jobType) =>\n                    jobType.id === updatedJobType.id ? updatedJobType : jobType\n                )\n            );\n\n            closeEditJobTypeModal(); // Закрытие модального окна\n        })\n        .catch((error) => {\n            console.error('Ошибка:', error);\n            alert('Произошла ошибка при обновлении типа работы: ' + (error.response?.data?.message || error.message));\n        });\n    };\n    \n\n    // Открытие модального окна для редактирования отдела\n    const handleEditDepartment = (id) => {\n        const department = departments.find(dep => dep.id === id);\n        if (department) {\n            setEditedDepartment(department);\n            setIsEditDepartmentModalOpen(true); // Открываем модальное окно\n        }\n    };\n\n    // Закрытие модального окна для редактирования отдела\n    const closeEditDepartmentModal = () => {\n        setIsEditDepartmentModalOpen(false); // Закрываем модальное окно\n        setEditedDepartment({}); // Сбрасываем редактируемый отдел\n    };\n\n    // Обновление отдела\n    const handleEditDepartmentSubmit = (e) => {\n        e.preventDefault();\n\n        axios.put(`http://localhost:8000/api/departments/${editedDepartment.id}/`, {\n            name: editedDepartment.name,\n        })\n        .then((response) => {\n            const updatedDepartment = response.data; // Получаем обновленный отдел из ответа сервера\n            setDepartments((prevDepartments) =>\n                prevDepartments.map((dep) =>\n                    dep.id === updatedDepartment.id ? updatedDepartment : dep\n                )\n            );\n\n            closeEditDepartmentModal(); // Закрытие модального окна\n        })\n        .catch((error) => {\n            console.error('Ошибка:', error);\n            alert('Произошла ошибка при обновлении отдела: ' + (error.response?.data?.message || error.message));\n        });\n    };\n\n    //скролл вверх\n    const handleScrollToTop = () => {\n        window.scrollTo({\n            top: 0,\n            behavior: 'smooth' // Плавная прокрутка\n        });\n    };\n        \n    return (\n        <div>\n            {/* Хедер с навигацией */}\n            <header className=\"header\">\n                <div className=\"cube\">\n                    <div className=\"side front\"></div>\n                    <div className=\"side back\"></div>\n                    <div className=\"side left\"></div>\n                    <div className=\"side right\"></div>\n                    <div className=\"side top\"></div>\n                    <div className=\"side bottom\"></div>\n                </div>\n                <h1>Employee Management System</h1>\n                <nav>\n                    <ul>\n                        <li><a href=\"#add-employee\">Add Employee</a></li>\n                        <li><a href=\"#add-job-type\">Add Job Type</a></li>\n                        <li><a href=\"#add-department\">Add Department</a></li>\n                    </ul>\n                </nav>\n            </header>\n\n            <main>\n                {/* Форма для добавления нового сотрудника */}\n                <form onSubmit={handleAddEmployee} className=\"employee-form\" id=\"add-employee\">\n\n                    <h2>Add New Employee</h2>\n\n                    <div className=\"input-field-container\">\n                        <input\n                            type=\"text\"\n                            className=\"input-field\"\n                            placeholder=\" \"\n                            value={newEmployee.first_name}\n                            onChange={(e) => setNewEmployee({ ...newEmployee, first_name: e.target.value })}\n                            required\n                            id=\"first-name\"\n                        />\n                        <label className=\"label\" htmlFor=\"first-name\">First Name</label>\n                    </div>\n\n                    <div className=\"input-field-container\">\n                        <input\n                            type=\"text\"\n                            className=\"input-field\"\n                            placeholder=\" \"\n                            value={newEmployee.last_name}\n                            onChange={(e) => setNewEmployee({ ...newEmployee, last_name: e.target.value })}\n                            required\n                            id=\"last-name\"\n                        />\n                        <label className=\"label\" htmlFor=\"last-name\">Last Name</label>\n                    </div>\n\n                    <div className=\"input-field-container\">\n                        <input\n                            type=\"number\"\n                            className=\"input-field\"\n                            placeholder=\" \"\n                            value={newEmployee.salary}\n                            onChange={(e) => setNewEmployee({ ...newEmployee, salary: e.target.value })}\n                            required\n                            id=\"salary\"\n                        />\n                        <label className=\"label\" htmlFor=\"salary\">Salary</label>\n                    </div>\n\n                    <div className=\"input-field-container\">\n                        <select\n                            className=\"select-field\"\n                            value={newEmployee.job_type}\n                            onChange={(e) => setNewEmployee({ ...newEmployee, job_type: e.target.value })}\n                            required\n                        >\n                            <option value=\"\" disabled hidden>Select Job Type</option>\n                            {jobTypes.map(jobType => (\n                                <option key={jobType.id} value={jobType.id}>{jobType.name}</option>\n                            ))}\n                        </select>\n                        <label className=\"label\" htmlFor=\"job-type\">Job Type</label>\n                    </div>\n\n                    <div className=\"input-field-container\">\n                        <select\n                            className=\"select-field\"\n                            value={newEmployee.department}\n                            onChange={(e) => setNewEmployee({ ...newEmployee, department: e.target.value })}\n                            required\n                        >\n                            <option value=\"\" disabled hidden>Select Department</option>\n                            {departments.map(department => (\n                                <option key={department.id} value={department.id}>{department.name}</option>\n                            ))}\n                        </select>\n                        <label className=\"label\" htmlFor=\"department\">Department</label>\n                    </div>\n\n                    <button type=\"submit\" className=\"export-button\">Add Employee</button>\n                </form>\n                \n                {isModalOpen && (\n                    <div className=\"modal\">\n                        <div className=\"modal-content\">\n                            <h2>Edit Employee</h2>\n                            <form onSubmit={handleSaveChanges}>\n                                <input\n                                    type=\"text\"\n                                    name=\"first_name\"\n                                    placeholder=\"First Name\"\n                                    value={editedEmployee.first_name}\n                                    onChange={handleInputChange}\n                                    required\n                                />\n                                <input\n                                    type=\"text\"\n                                    name=\"last_name\"\n                                    placeholder=\"Last Name\"\n                                    value={editedEmployee.last_name}\n                                    onChange={handleInputChange}\n                                    required\n                                />\n                                <input\n                                    type=\"number\"\n                                    name=\"salary\"\n                                    placeholder=\"Salary\"\n                                    value={editedEmployee.salary}\n                                    onChange={handleInputChange}\n                                    required\n                                />\n                                <select\n                                    name=\"job_type\"\n                                    value={editedEmployee.job_type}\n                                    onChange={handleInputChange}\n                                    required\n                                >\n                                    <option value=\"\">Select Job Type</option>\n                                    {jobTypes.map(jobType => (\n                                        <option key={jobType.id} value={jobType.id}>\n                                            {jobType.name}\n                                        </option>\n                                    ))}\n                                </select>\n                                <select\n                                    name=\"department\"\n                                    value={editedEmployee.department}\n                                    onChange={handleInputChange}\n                                    required\n                                >\n                                    <option value=\"\">Select Department</option>\n                                    {departments.map(dept => (\n                                        <option key={dept.id} value={dept.id}>\n                                            {dept.name}\n                                        </option>\n                                    ))}\n                                </select>\n                                <button type=\"submit\">Save Changes</button>\n                                <button type=\"button\" onClick={closeModal}>Cancel</button>\n                            </form>\n                        </div>\n                    </div>\n                )}\n\n                {/* Таблица сотрудников */}\n                <table className=\"styled-table\">\n                    <thead>\n                        <tr>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                            <th>Salary</th>\n                            <th>Job Type</th>\n                            <th>Department</th> {/* Новый столбец для отдела */}\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {employees.map(employee => (\n                            <tr key={employee.id}>\n                                <td>{employee.first_name}</td>\n                                <td>{employee.last_name}</td>\n                                <td>{employee.salary}</td>\n                                <td>\n                                    {jobTypes.find(job => job.id === employee.job_type)?.name || 'Unknown Job Type'}\n                                </td>\n                                <td>\n                                    {departments.find(dept => dept.id === employee.department)?.name || 'Unknown Department'}\n                                </td>\n                                <td>\n                                    <button\n                                        className=\"edit-button\"\n                                        onClick={() => handleEditEmployee(employee.id)}> {/* Добавлено для редактирования */}\n                                        <span role=\"img\" aria-label=\"Редактировать\">✏️</span>\n                                    </button>\n                                    <button\n                                        className=\"delete-button\"\n                                        onClick={() => handleDeleteEmployee(employee.id)}>\n                                        <span role=\"img\" aria-label=\"Удалить\">🗑️</span>\n                                    </button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n\n\n                {/* Форма для добавления нового типа работы */}\n                <form onSubmit={handleAddJobType} className=\"job-type-form\" id=\"add-job-type\">\n                    <h2>Add New Job Type</h2>\n\n                    <div className=\"input-field-container\">\n                        <input\n                            type=\"text\"\n                            className=\"input-field\" // Добавьте класс для стилей\n                            placeholder=\" \" // Оставьте пробел для использования метки\n                            value={newJobType.name}\n                            onChange={(e) => setNewJobType({ name: e.target.value })}\n                            required\n                            id=\"job-type-name\" // Уникальный ID для метки\n                        />\n                        <label className=\"label\" htmlFor=\"job-type-name\">Job Type Name</label> {/* Добавьте метку */}\n\n                        <button className=\"export-button\" type=\"submit\">Add Job Type</button>\n                    </div>\n                    \n                </form>\n\n\n                {/* Модальное окно для редактирования типа работы */}\n                {isEditJobTypeModalOpen && (\n                    <div className=\"modal\" >\n                        <form onSubmit={handleEditJobTypeSubmit}>\n                            <h2>Редактировать тип работы</h2>\n\n                            <div className=\"input-field-container\">\n                                <input \n                                    type=\"text\" \n                                    className=\"input-field\"\n                                    value={editedJobType.name || ''} \n                                    onChange={(e) => setEditedJobType({ ...editedJobType, name: e.target.value })} \n                                    placeholder=\"Имя типа работы\" \n                                />\n                                <button class=\"export-button\" type=\"submit\">Сохранить изменения</button>\n                                <button class=\"export-button\" type=\"button\" onClick={closeEditJobTypeModal}>Закрыть</button>\n                            </div>\n                        </form>\n                    </div>\n                )}\n\n                {/* Таблица типов работ */}\n                <table className=\"styled-table\">\n                    <thead>\n                        <tr>\n                            <th>Job Type</th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {jobTypes.map(jobType => (\n                            <tr key={jobType.id}>\n                                <td>{jobType.name}</td>\n                                <td>\n                                    <button\n                                        className=\"edit-button\"\n                                        onClick={() => handleEditJobType(jobType.id)}>\n                                        <span role=\"img\" aria-label=\"Редактировать\">✏️</span>\n                                    </button>\n                                    <button\n                                        className=\"delete-button\"\n                                        onClick={() => handleDeleteJobType(jobType.id)}>\n                                        <span role=\"img\" aria-label=\"Удалить\">🗑️</span>\n                                    </button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n\n                <form onSubmit={handleAddDepartment} className=\"department-form\" id=\"add-department\">\n                    <h2>Add New Department</h2>\n\n                    <div className=\"input-field-container\">\n                        <input\n                            type=\"text\"\n                            className=\"input-field\"\n                            placeholder=\" \"\n                            value={newDepartment.name}\n                            onChange={(e) => setNewDepartment({ name: e.target.value })}\n                            required\n                        />\n                        <label className=\"label\" htmlFor=\"job-type-name\">Department Name</label>\n\n                        <button class=\"export-button\" type=\"submit\">Add Department</button>\n                    </div>\n                </form>\n\n                 {/* Модальное окно для редактирования отдела */}\n                {isEditDepartmentModalOpen && (\n                    <div className=\"modal\">\n                        <form onSubmit={handleEditDepartmentSubmit}>\n                            <h2>Редактировать отдел</h2>\n\n                            <div className=\"input-field-container\">\n                                <input \n                                    type=\"text\" \n                                    className=\"input-field\"\n                                    value={editedDepartment.name} \n                                    onChange={(e) => setEditedDepartment({ ...editedDepartment, name: e.target.value })} \n                                    placeholder=\"Имя отдела\" \n                                />\n                                <button class=\"export-button\" type=\"submit\">Сохранить изменения</button>\n                                <button class=\"export-button\" type=\"button\" onClick={closeEditDepartmentModal}>Закрыть</button>\n                            </div>\n                        </form>\n                    </div>\n                )}\n\n                {/* Таблица отдела работ */}\n                <table className=\"styled-table\">\n                    <thead>\n                        <tr>\n                            <th>Department Name</th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {departments.map(department => (\n                            <tr key={department.id}>\n                                <td>{department.name}</td>\n                                <td>\n                                    <button\n                                        className=\"edit-button\"\n                                        onClick={() => handleEditDepartment(department.id)}> {/* Добавлено для редактирования */}\n                                        <span role=\"img\" aria-label=\"Редактировать\">✏️</span>\n                                    </button>\n                                    <button\n                                        className=\"delete-button\"\n                                        onClick={() => handleDeleteDepartment(department.id)}>\n                                        <span role=\"img\" aria-label=\"Удалить\">🗑️</span>\n                                    </button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n\n\n                <div className=\"export-buttons\">\n                    <button className=\"export-button\" onClick={handleExportEmployeesToExcel}>\n                        Export Employees to Excel\n                    </button>\n\n                    <button className=\"export-button\" onClick={handleExportJobTypesToExcel}>\n                        Export Job Types to Excel\n                    </button>\n\n                    <button className=\"export-button\" onClick={handleExportEmployees}>Export Employees to Text File</button>\n                    <button className=\"export-button\" onClick={handleExportJobTypes}>Export Job Types to Text File</button>\n                </div>\n            </main>\n\n            <button className=\"scroll-to-top\" onClick={handleScrollToTop}>\n                <span role=\"img\" aria-label=\"вверх\">⬆️</span>\n            </button>\n\n            <FilterComp employees={employees} jobTypes={jobTypes} departments={departments} />\n\n            <div>\n                {/* экспорт в файл */}\n                <ExportToWord\n                    selectedEmployees={selectedEmployees}\n                    vacationStartDates={vacationStartDates}\n                    vacationEndDates={vacationEndDates}\n                    employees={employees}\n                    handleSelectEmployee={handleSelectEmployee} // Передайте функции для обработки выбора\n                    handleStartDateChange={handleStartDateChange}\n                    handleEndDateChange={handleEndDateChange}\n                />\n            </div>\n\n            {/* Футер */}\n            <footer className=\"footer\">\n                <p>© 2024 авторский проект Employee Management System</p>\n            </footer>\n        </div>\n    );\n}\n\nexport default EmployeeList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}