{"ast":null,"code":"var _jsxFileName = \"/Users/Roman/Desktop/RBP/frontend/src/components/ExportToWord.js\";\nimport React from 'react';\nimport { Document, Packer, Paragraph, Table, TableRow, TableCell, WidthType } from 'docx';\nimport { saveAs } from 'file-saver';\nconst ExportToWord = ({\n  selectedEmployees,\n  jobTypes = [],\n  departments = []\n}) => {\n  const handleExport = () => {\n    if (selectedEmployees.length === 0) {\n      alert(\"Нет выбранных сотрудников для экспорта.\");\n      return;\n    }\n    console.log(\"Selected Employees: \", selectedEmployees);\n    console.log(\"Job Types: \", jobTypes);\n    console.log(\"Departments: \", departments);\n    const doc = new Document({\n      sections: [{\n        properties: {},\n        children: [new Paragraph({\n          text: 'Employee List',\n          heading: 'Title'\n        }), new Table({\n          rows: [new TableRow({\n            children: [new TableCell({\n              children: [new Paragraph('First Name')],\n              width: {\n                size: 20,\n                type: WidthType.PERCENTAGE\n              }\n            }), new TableCell({\n              children: [new Paragraph('Last Name')],\n              width: {\n                size: 20,\n                type: WidthType.PERCENTAGE\n              }\n            }), new TableCell({\n              children: [new Paragraph('Salary')],\n              width: {\n                size: 20,\n                type: WidthType.PERCENTAGE\n              }\n            }), new TableCell({\n              children: [new Paragraph('Job Type')],\n              width: {\n                size: 20,\n                type: WidthType.PERCENTAGE\n              }\n            }), new TableCell({\n              children: [new Paragraph('Department')],\n              width: {\n                size: 20,\n                type: WidthType.PERCENTAGE\n              }\n            })]\n          }), ...selectedEmployees.map(emp => {\n            var _emp$salary, _jobTypes$find, _departments$find;\n            return new TableRow({\n              children: [new TableCell({\n                children: [new Paragraph(emp.first_name || '')]\n              }), new TableCell({\n                children: [new Paragraph(emp.last_name || '')]\n              }), new TableCell({\n                children: [new Paragraph(((_emp$salary = emp.salary) === null || _emp$salary === void 0 ? void 0 : _emp$salary.toString()) || '')]\n              }), new TableCell({\n                children: [new Paragraph(((_jobTypes$find = jobTypes.find(job => job.id === emp.job_type)) === null || _jobTypes$find === void 0 ? void 0 : _jobTypes$find.name) || 'Unknown Job Type')]\n              }), new TableCell({\n                children: [new Paragraph(((_departments$find = departments.find(dept => dept.id === emp.department)) === null || _departments$find === void 0 ? void 0 : _departments$find.name) || 'Unknown Department')]\n              })]\n            });\n          })]\n        })]\n      }]\n    });\n    Packer.toBlob(doc).then(blob => {\n      saveAs(blob, 'employees.docx');\n    });\n  };\n  return /*#__PURE__*/React.createElement(\"button\", {\n    className: \"export-button\",\n    onClick: handleExport,\n    disabled: selectedEmployees.length === 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, \"\\u042D\\u043A\\u0441\\u043F\\u043E\\u0440\\u0442 \\u0432 Word\");\n};\nexport default ExportToWord;","map":{"version":3,"names":["React","Document","Packer","Paragraph","Table","TableRow","TableCell","WidthType","saveAs","ExportToWord","selectedEmployees","jobTypes","departments","handleExport","length","alert","console","log","doc","sections","properties","children","text","heading","rows","width","size","type","PERCENTAGE","map","emp","_emp$salary","_jobTypes$find","_departments$find","first_name","last_name","salary","toString","find","job","id","job_type","name","dept","department","toBlob","then","blob","createElement","className","onClick","disabled","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/Roman/Desktop/RBP/frontend/src/components/ExportToWord.js"],"sourcesContent":["import React from 'react';\nimport { Document, Packer, Paragraph, Table, TableRow, TableCell, WidthType } from 'docx';\nimport { saveAs } from 'file-saver';\n\nconst ExportToWord = ({ selectedEmployees, jobTypes = [], departments = [] }) => {\n    const handleExport = () => {\n        if (selectedEmployees.length === 0) {\n            alert(\"Нет выбранных сотрудников для экспорта.\");\n            return;\n        }\n\n        console.log(\"Selected Employees: \", selectedEmployees);\n        console.log(\"Job Types: \", jobTypes);\n        console.log(\"Departments: \", departments);\n\n        const doc = new Document({\n            sections: [\n                {\n                    properties: {},\n                    children: [\n                        new Paragraph({\n                            text: 'Employee List',\n                            heading: 'Title',\n                        }),\n                        new Table({\n                            rows: [\n                                new TableRow({\n                                    children: [\n                                        new TableCell({\n                                            children: [new Paragraph('First Name')],\n                                            width: { size: 20, type: WidthType.PERCENTAGE }\n                                        }),\n                                        new TableCell({\n                                            children: [new Paragraph('Last Name')],\n                                            width: { size: 20, type: WidthType.PERCENTAGE }\n                                        }),\n                                        new TableCell({\n                                            children: [new Paragraph('Salary')],\n                                            width: { size: 20, type: WidthType.PERCENTAGE }\n                                        }),\n                                        new TableCell({\n                                            children: [new Paragraph('Job Type')],\n                                            width: { size: 20, type: WidthType.PERCENTAGE }\n                                        }),\n                                        new TableCell({\n                                            children: [new Paragraph('Department')],\n                                            width: { size: 20, type: WidthType.PERCENTAGE }\n                                        }),\n                                    ]\n                                }),\n                                ...selectedEmployees.map(emp =>\n                                    new TableRow({\n                                        children: [\n                                            new TableCell({\n                                                children: [new Paragraph(emp.first_name || '')]\n                                            }),\n                                            new TableCell({\n                                                children: [new Paragraph(emp.last_name || '')]\n                                            }),\n                                            new TableCell({\n                                                children: [new Paragraph(emp.salary?.toString() || '')]\n                                            }),\n                                            new TableCell({\n                                                children: [\n                                                    new Paragraph(\n                                                        jobTypes.find(job => job.id === emp.job_type)?.name || 'Unknown Job Type'\n                                                    )\n                                                ]\n                                            }),\n                                            new TableCell({\n                                                children: [\n                                                    new Paragraph(\n                                                        departments.find(dept => dept.id === emp.department)?.name || 'Unknown Department'\n                                                    )\n                                                ]\n                                            }),\n                                        ]\n                                    })\n                                )\n                            ]\n                        })\n                    ]\n                }\n            ]\n        });\n\n        Packer.toBlob(doc).then(blob => {\n            saveAs(blob, 'employees.docx');\n        });\n    };\n\n    return (\n        <button className=\"export-button\" onClick={handleExport} disabled={selectedEmployees.length === 0}>\n            Экспорт в Word\n        </button>\n    );\n};\n\nexport default ExportToWord;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}