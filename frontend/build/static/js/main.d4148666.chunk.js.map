{"version":3,"sources":["components/FilterComp.js","components/ExportToWord.js","components/EmployeeList.js","App.js","reportWebVitals.js","index.js"],"names":["EmployeeTable","_ref2","employees","jobTypes","departments","React","createElement","className","map","emp","_jobTypes$find2","_departments$find2","key","id","first_name","last_name","salary","find","job","job_type","name","dept","department","FilterComp","_ref","filteredEmployees","setFilteredEmployees","useState","selectedJobTypes","setSelectedJobTypes","selectedDepartments","setSelectedDepartments","searchQuery","setSearchQuery","isNoneSelected","setIsNoneSelected","errorMessage","setErrorMessage","handleJobTypeChange","e","value","checked","target","prevState","filter","handleDepartmentChange","onSubmit","preventDefault","filtered","matchesJobType","length","includes","toString","matchesDepartment","type","onChange","placeholder","onClick","_jobTypes$find","_departments$find","jobTypeName","departmentName","searchQueryLower","toLowerCase","jobType","htmlFor","handleReset","ExportToWord","selectedEmployees","vacationStartDates","vacationEndDates","handleSelectEmployee","handleStartDateChange","handleEndDateChange","setJobTypes","setDepartments","useEffect","async","response","fetch","ok","Error","data","json","error","console","fetchJobTypes","fetchDepartments","DatePicker","selected","date","placeholderText","handleExport","alert","vacationStart","toLocaleDateString","vacationEnd","Document","sections","properties","children","Paragraph","text","heading","spacing","after","Date","forEach","doc","index","Packer","toBlob","then","blob","saveAs","disabled","handleExportExcel","exportData","worksheet","utils","json_to_sheet","workbook","book_new","book_append_sheet","XLSX","startDate","endDate","EmployeeList","setEmployees","isModalOpen","setIsModalOpen","employeeToEdit","setEmployeeToEdit","editedEmployee","setEditedEmployee","editedJobType","setEditedJobType","editedDepartment","setEditedDepartment","isEditJobTypeModalOpen","setIsEditJobTypeModalOpen","isEditDepartmentModalOpen","setIsEditDepartmentModalOpen","newEmployee","setNewEmployee","newJobType","setNewJobType","newDepartment","setNewDepartment","setSelectedEmployees","setVacationStartDates","setVacationEndDates","axios","get","res","catch","err","closeModal","handleInputChange","closeEditJobTypeModal","closeEditDepartmentModal","href","post","required","hidden","handleSaveChanges","put","employee","_jobTypes$find3","_departments$find3","handleEditEmployee","role","aria-label","handleDeleteEmployee","delete","updatedJobType","prevJobTypes","_error$response","_error$response$data","message","class","handleEditJobType","handleDeleteJobType","updatedDepartment","prevDepartments","dep","_error$response2","_error$response2$data","handleEditDepartment","handleDeleteDepartment","handleExportEmployeesToExcel","employeeData","_emp$salary2","writeFile","handleExportJobTypesToExcel","jobTypeData","handleExportEmployees","Table","rows","TableRow","TableCell","width","size","WidthType","PERCENTAGE","_emp$salary","handleExportJobTypes","handleScrollToTop","window","scrollTo","top","behavior","prevSelected","employeeId","prev","log","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.d4148666.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './FilterComp.css';\nconst FilterComp = ({ employees, jobTypes, departments }) => {\n    const [filteredEmployees, setFilteredEmployees] = useState(employees);\n    const [selectedJobTypes, setSelectedJobTypes] = useState([]);\n    const [selectedDepartments, setSelectedDepartments] = useState([]);\n    const [searchQuery, setSearchQuery] = useState('');\n    const [isNoneSelected, setIsNoneSelected] = useState(false);\n    const [errorMessage, setErrorMessage] = useState('');\n\n    // Обработка выбора флажков для типа работы\n    const handleJobTypeChange = (e) => {\n        const { value, checked } = e.target;\n        setSelectedJobTypes(prevState =>\n            checked ? [...prevState, value] : prevState.filter(id => id !== value)\n        );\n    };\n\n    // Обработка выбора флажков для отдела\n    const handleDepartmentChange = (e) => {\n        const { value, checked } = e.target;\n        setSelectedDepartments(prevState =>\n            checked ? [...prevState, value] : prevState.filter(id => id !== value)\n        );\n    };\n\n    // Обработка флажка None (очистка фильтров)\n    const handleNoneChange = (e) => {\n        const { checked } = e.target;\n        setIsNoneSelected(checked);\n    };\n\n    // Обработка ввода поискового запроса\n    const handleSearchChange = (e) => {\n        setSearchQuery(e.target.value);\n    };\n\n    // Очистка всех фильтров, поля поиска и таблицы\n    const handleReset = () => {\n        setSelectedJobTypes([]);\n        setSelectedDepartments([]);\n        setSearchQuery('');\n        setFilteredEmployees([]);\n        setIsNoneSelected(false);\n        setErrorMessage('');\n    };\n\n    // Обработка нажатия на кнопку поиска\n    const handleSearchSubmit = (e) => {\n        e.preventDefault();\n\n        const filtered = employees.filter(emp => {\n            const jobTypeName = jobTypes.find(job => job.id === emp.job_type)?.name || '';\n            const departmentName = departments.find(dept => dept.id === emp.department)?.name || '';\n            const searchQueryLower = searchQuery.toLowerCase();\n\n            // Приведение фамилии к нижнему регистру для поиска\n            const firstNameLower = emp.first_name ? emp.first_name.toLowerCase() : '';\n\n            return (\n                firstNameLower.includes(searchQueryLower) ||\n                jobTypeName.toLowerCase().includes(searchQueryLower) ||\n                departmentName.toLowerCase().includes(searchQueryLower)\n            );\n        });\n\n        if (filtered.length === 0) {\n            setErrorMessage('Данные не найдены. Проверьте правильность ввода.');\n        } else {\n            setErrorMessage('');\n        }\n\n        setFilteredEmployees(filtered);\n    };\n\n    // Обработка нажатия на кнопку фильтрации\n    const handleFilterSubmit = (e) => {\n        e.preventDefault();\n\n        if (isNoneSelected) {\n            // Очищаем таблицу\n            setFilteredEmployees([]);\n            setErrorMessage('');\n        } else {\n            const filtered = employees.filter(emp => {\n                const matchesJobType = selectedJobTypes.length === 0 || selectedJobTypes.includes(emp.job_type.toString());\n                const matchesDepartment = selectedDepartments.length === 0 || selectedDepartments.includes(emp.department.toString());\n                return matchesJobType && matchesDepartment;\n            });\n\n            setFilteredEmployees(filtered);\n            setErrorMessage('');\n        }\n    };\n\n    return (\n        <div className=\"filter-comp\">\n            <form onSubmit={handleFilterSubmit}>\n                <h3>Filter Employees</h3>\n\n                <div className=\"input-field-container\">\n                    {/* Поле поиска */}\n                    <input\n                        type=\"text\"\n                        className=\"input-field\"\n                        value={searchQuery}\n                        onChange={handleSearchChange}\n                        placeholder=\"Поиск\"\n                    />\n                    <button type=\"button\" onClick={handleSearchSubmit}>\n                        Поиск\n                    </button>\n                </div>\n                {errorMessage && <p className=\"error-message\">{errorMessage}</p>}\n\n                <div className=\"checkbox-group\">\n                    <div>\n                        <h4>Job Types</h4>\n                        {jobTypes.map(jobType => (\n                            <div key={jobType.id}>\n                                <input\n                                    type=\"checkbox\"\n                                    id={`jobType-${jobType.id}`}\n                                    value={jobType.id}\n                                    checked={selectedJobTypes.includes(jobType.id.toString())}\n                                    onChange={handleJobTypeChange}\n                                />\n                                <label htmlFor={`jobType-${jobType.id}`}>{jobType.name}</label>\n                            </div>\n                        ))}\n                    </div>\n\n                    <div>\n                        <h4>Departments</h4>\n                        {departments.map(dept => (\n                            <div key={dept.id}>\n                                <input\n                                    type=\"checkbox\"\n                                    id={`dept-${dept.id}`}\n                                    value={dept.id}\n                                    checked={selectedDepartments.includes(dept.id.toString())}\n                                    onChange={handleDepartmentChange}\n                                />\n                                <label htmlFor={`dept-${dept.id}`}>{dept.name}</label>\n                            </div>\n                        ))}\n                    </div>\n\n                    <div>\n                        <input\n                            type=\"checkbox\"\n                            id=\"resetFilters\"\n                            checked={isNoneSelected}\n                            onChange={handleNoneChange}\n                        />\n                        <label htmlFor=\"resetFilters\">None (Clear Filters)</label>\n                    </div>\n                </div>\n\n                <button type=\"submit\">Применить фильтры</button>\n            </form>\n\n            {/* Кнопка сброса */}\n            <button className=\"reset-button\" onClick={handleReset}>\n                Сбросить все\n            </button>\n\n            {/* Таблица сотрудников */}\n            <EmployeeTable employees={filteredEmployees} jobTypes={jobTypes} departments={departments} />\n        </div>\n    );\n};\n\n// Компонент таблицы для отображения сотрудников\nconst EmployeeTable = ({ employees, jobTypes, departments }) => {\n    return (\n        <table className=\"styled-table\">\n            <thead>\n                <tr>\n                    <th>First Name</th>\n                    <th>Last Name</th>\n                    <th>Salary</th>\n                    <th>Job Type</th>\n                    <th>Department</th>\n                </tr>\n            </thead>\n            <tbody>\n                {employees.map(emp => (\n                    <tr key={emp.id}>\n                        <td>{emp.first_name}</td>\n                        <td>{emp.last_name}</td>\n                        <td>{emp.salary}</td>\n                        <td>{jobTypes.find(job => job.id === emp.job_type)?.name || 'Unknown Job Type'}</td>\n                        <td>{departments.find(dept => dept.id === emp.department)?.name || 'Unknown Department'}</td>\n                    </tr>\n                ))}\n            </tbody>\n        </table>\n    );\n};\n\nexport default FilterComp;\n","// ExportToWord.js\nimport React, { useState, useEffect } from 'react';\nimport { Document, Packer, Paragraph } from 'docx';\nimport { saveAs } from 'file-saver';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport * as XLSX from 'xlsx';\nimport { utils } from 'xlsx';\n\nconst ExportToWord = ({ selectedEmployees, vacationStartDates, vacationEndDates, employees, handleSelectEmployee, handleStartDateChange, handleEndDateChange }) => {\n    const [jobTypes, setJobTypes] = useState([]);\n    const [departments, setDepartments] = useState([]);\n\n    useEffect(() => {\n        const fetchJobTypes = async () => {\n            try {\n                const response = await fetch('http://localhost:8000/api/job-types/');\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n                const data = await response.json();\n                setJobTypes(data);\n            } catch (error) {\n                console.error('Error fetching job types:', error);\n            }\n        };\n\n        const fetchDepartments = async () => {\n            try {\n                const response = await fetch('http://localhost:8000/api/departments/');\n                if (!response.ok) {\n                    throw new Error('Network response was not ok');\n                }\n                const data = await response.json();\n                setDepartments(data);\n            } catch (error) {\n                console.error('Error fetching departments:', error);\n            }\n        };\n\n        fetchJobTypes();\n        fetchDepartments();\n    }, []);\n\n    const handleExport = () => {\n        if (selectedEmployees.length === 0) {\n            alert(\"Нет выбранных сотрудников для экспорта.\");\n            return;\n        }\n\n        const docs = selectedEmployees.map(emp => {\n            const jobType = jobTypes.find(job => job.id === emp.job_type)?.name || 'Не указано';\n            const department = departments.find(dept => dept.id === emp.department)?.name || 'Не указано';\n            const vacationStart = vacationStartDates[emp.id]\n                ? vacationStartDates[emp.id].toLocaleDateString()\n                : 'Не указано';\n            const vacationEnd = vacationEndDates[emp.id]\n                ? vacationEndDates[emp.id].toLocaleDateString()\n                : 'Не указано';\n\n            const doc = new Document({\n                sections: [{\n                    properties: {},\n                    children: [\n                        new Paragraph({\n                            text: `Заявление на отпуск`,\n                            heading: 'Title',\n                        }),\n                        new Paragraph({\n                            text: `Я, ${emp.first_name} ${emp.last_name}, занимающий должность \"${jobType}\" в отделе \"${department}\", прошу предоставить мне отпуск.`,\n                            spacing: { after: 200 },\n                        }),\n                        new Paragraph({\n                            text: `Дата начала отпуска: ${vacationStart}`,\n                            spacing: { after: 200 },\n                        }),\n                        new Paragraph({\n                            text: `Дата окончания отпуска: ${vacationEnd}`,\n                            spacing: { after: 200 },\n                        }),\n                        new Paragraph({\n                            text: `Подпись: ____________`,\n                            spacing: { after: 200 },\n                        }),\n                        new Paragraph({\n                            text: `Дата генерации документа: ${new Date().toLocaleDateString()}`,\n                            spacing: { after: 200 },\n                        }),\n                    ],\n                }],\n            });\n\n            return doc;\n        });\n\n        docs.forEach((doc, index) => {\n            Packer.toBlob(doc).then(blob => {\n                saveAs(blob, `employee_${selectedEmployees[index].first_name}_${selectedEmployees[index].last_name}_vacation_request.docx`);\n            });\n        });\n    };\n    const handleExportExcel = () => {\n        if (selectedEmployees.length === 0) {\n            alert(\"Нет выбранных сотрудников для экспорта.\");\n            return;\n        }\n\n        // Подготовка данных для экспорта\n        const exportData = selectedEmployees.map((emp) => {\n            return {\n                \"Имя\": emp.first_name,\n                \"Фамилия\": emp.last_name,\n                \"Дата начала отпуска\": vacationStartDates[emp.id]\n                    ? vacationStartDates[emp.id].toLocaleDateString()\n                    : 'Не указано',\n                \"Дата окончания отпуска\": vacationEndDates[emp.id]\n                    ? vacationEndDates[emp.id].toLocaleDateString()\n                    : 'Не указано'\n            };\n        });\n\n        const worksheet = utils.json_to_sheet(exportData);\n        const workbook = utils.book_new();\n        utils.book_append_sheet(workbook, worksheet, 'Employees');\n\n        XLSX.writeFile(workbook, 'employees.xlsx');\n    };\n\n    return (\n        <div>\n            <div className=\"employee-list-container\">\n                <div className=\"employee-list\">\n                    {/* Список сотрудников с флажками для выбора */}\n                    {employees.map((emp) => (\n                        <div key={emp.id} className=\"employee-item\">\n                            <input\n                                type=\"checkbox\"\n                                checked={selectedEmployees.includes(emp)}\n                                onChange={() => handleSelectEmployee(emp)}\n                                className=\"employee-checkbox\"\n                            />\n                            <span className=\"employee-name\">\n                                {emp.first_name} {emp.last_name}\n                            </span>\n\n                            {/* Календарь для выбора даты начала отпуска */}\n                            <DatePicker\n                                selected={vacationStartDates[emp.id]}\n                                onChange={(date) => handleStartDateChange(emp.id, date)}\n                                placeholderText=\"Начало отпуска\"\n                                className=\"date-picker\"\n                            />\n\n                            {/* Календарь для выбора даты окончания отпуска */}\n                            <DatePicker\n                                selected={vacationEndDates[emp.id]}\n                                onChange={(date) => handleEndDateChange(emp.id, date)}\n                                placeholderText=\"Окончание отпуска\"\n                                className=\"date-picker\"\n                            />\n                        </div>\n                    ))}\n                </div>\n\n                <div className=\"export-buttons\">\n                    {/* Кнопки для экспорта */}\n                    <button className=\"export-button\" onClick={handleExport} disabled={selectedEmployees.length === 0}>\n                        Экспорт в Word\n                    </button>\n                    <button className=\"export-button\" onClick={handleExportExcel} disabled={selectedEmployees.length === 0}>\n                        Экспорт в Excel\n                    </button>\n                </div>\n\n                {/* Предварительный просмотр документов */}\n                {selectedEmployees.length > 0 && (\n                    <div className=\"preview-container\">\n                        <h3>Предварительный просмотр документов:</h3>\n                        {selectedEmployees.map((emp) => {\n                            const startDate = vacationStartDates[emp.id]\n                                ? vacationStartDates[emp.id].toLocaleDateString()\n                                : 'Не указано';\n                            const endDate = vacationEndDates[emp.id]\n                                ? vacationEndDates[emp.id].toLocaleDateString()\n                                : 'Не указано';\n\n                            return (\n                                <div key={emp.id} className=\"preview-item\">\n                                    <h4>Заявление на отпуск для {emp.first_name} {emp.last_name}</h4>\n                                    <p>Дата начала отпуска: {startDate}</p>\n                                    <p>Дата окончания отпуска: {endDate}</p>\n                                </div>\n                            );\n                        })}\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default ExportToWord;\n","import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './EmployeeList.css';\nimport './ScrollToTopButton.css';\nimport './export.css';\n// import DatePicker from 'react-datepicker'; // Импортируем DatePicker\nimport 'react-datepicker/dist/react-datepicker.css'; // Импортируем стили для DatePicker\n\nimport FilterComp from './FilterComp';\nimport ExportToWord from './ExportToWord';\nimport { Document, Packer, Paragraph, Table, TableRow, TableCell, WidthType } from 'docx';\nimport { utils, writeFile } from 'xlsx';\nimport { saveAs } from 'file-saver';\nconst EmployeeList = () => {\n    const [employees, setEmployees] = useState([]);\n    const [jobTypes, setJobTypes] = useState([]);\n    const [departments, setDepartments] = useState([]);\n    \n    // Состояние для модального окна\n    const [isModalOpen, setIsModalOpen] = useState(false);\n    const [employeeToEdit, setEmployeeToEdit] = useState(null);\n    const [editedEmployee, setEditedEmployee] = useState({\n        first_name: '',\n        last_name: '',\n        salary: '',\n        job_type: '',\n        department: ''\n    });\n\n    const [editedJobType, setEditedJobType] = useState({});\n    const [editedDepartment, setEditedDepartment] = useState({});\n    \n    const [isEditJobTypeModalOpen, setIsEditJobTypeModalOpen] = useState(false);\n    const [isEditDepartmentModalOpen, setIsEditDepartmentModalOpen] = useState(false);\n\n    const [newEmployee, setNewEmployee] = useState({\n        first_name: '',\n        last_name: '',\n        salary: '',\n        job_type: '',\n        department: '',\n    });\n    const [newJobType, setNewJobType] = useState({\n        name: '',\n    });\n    const [newDepartment, setNewDepartment] = useState({\n        name: '' });\n    \n    const [selectedEmployees, setSelectedEmployees] = useState([]);\n\n    const handleSelectEmployee = (employee) => {\n        setSelectedEmployees(prevSelected => {\n            if (prevSelected.includes(employee)) {\n                return prevSelected.filter(emp => emp !== employee); // Убираем, если уже выбран\n            } else {\n                return [...prevSelected, employee]; // Добавляем, если не выбран\n            }\n        });\n    };\n\n    const [vacationStartDates, setVacationStartDates] = useState({});\n    const [vacationEndDates, setVacationEndDates] = useState({});\n\n    // Обработчики изменений дат начала и окончания отпуска\n    const handleStartDateChange = (employeeId, date) => {\n        setVacationStartDates(prev => ({ ...prev, [employeeId]: date }));\n        console.log(`Start date for employee ${employeeId}:`, date); // Debugging log\n    };\n    \n    const handleEndDateChange = (employeeId, date) => {\n        setVacationEndDates(prev => ({ ...prev, [employeeId]: date }));\n        console.log(`End date for employee ${employeeId}:`, date); // Debugging log\n    };\n\n        // Новая функция для экспорта в docx\n    const handleExportEmployees = () => {\n        const doc = new Document({\n            sections: [\n                {\n                    properties: {},\n                    children: [\n                        new Paragraph({\n                            text: 'Employee List',\n                            heading: 'Title',\n                        }),\n                        new Table({\n                            rows: [\n                                new TableRow({\n                                    children: [\n                                        new TableCell({\n                                            children: [new Paragraph('First Name')],\n                                            width: { size: 25, type: WidthType.PERCENTAGE }\n                                        }),\n                                        new TableCell({\n                                            children: [new Paragraph('Last Name')],\n                                            width: { size: 25, type: WidthType.PERCENTAGE }\n                                        }),\n                                        new TableCell({\n                                            children: [new Paragraph('Salary')],\n                                            width: { size: 25, type: WidthType.PERCENTAGE }\n                                        }),\n                                        new TableCell({\n                                            children: [new Paragraph('Job Type')],\n                                            width: { size: 25, type: WidthType.PERCENTAGE }\n                                        }),\n                                        new TableCell({\n                                            children: [new Paragraph('Department')],\n                                            width: { size: 25, type: WidthType.PERCENTAGE }\n                                        }),\n                                    ]\n                                }),\n                                ...employees.map(emp => \n                                    new TableRow({\n                                        children: [\n                                            new TableCell({\n                                                children: [new Paragraph(emp.first_name || '')]\n                                            }),\n                                            new TableCell({\n                                                children: [new Paragraph(emp.last_name || '')]\n                                            }),\n                                            new TableCell({\n                                                children: [new Paragraph(emp.salary?.toString() || '')]\n                                            }),\n                                            new TableCell({\n                                                children: [\n                                                    new Paragraph(\n                                                        jobTypes.find(job => job.id === emp.job_type)?.name || 'Unknown Job Type'\n                                                    )\n                                                ]\n                                            }),\n                                            new TableCell({\n                                                children: [\n                                                    new Paragraph(\n                                                        departments.find(dept => dept.id === emp.department)?.name || 'Unknown Department'\n                                                    )\n                                                ]\n                                            }),\n                                        ]\n                                    })\n                                )\n                            ]\n                        })\n                    ]\n                }\n            ]\n        });\n    \n        // Генерация файла и скачивание\n        Packer.toBlob(doc).then(blob => {\n            saveAs(blob, 'employees.docx');\n        });\n    };\n    \n\n    const handleExportJobTypes = () => {\n        const doc = new Document({\n            sections: [\n                {\n                    properties: {},\n                    children: [\n                        new Paragraph({\n                            text: 'JobType List',\n                            heading: 'Title',\n                        }),\n                        new Table({\n                            rows: [\n                                new TableRow({\n                                    children: [\n                                        new TableCell({\n                                            children: [new Paragraph('Name')],\n                                            width: { size: 25, type: WidthType.PERCENTAGE }\n                                        }),\n                                    ]\n                                }),\n                                ...jobTypes.map(emp => \n                                    new TableRow({\n                                        children: [\n                                            new TableCell({\n                                                children: [new Paragraph(emp.name)]\n                                            }),\n                                        ]\n                                    })\n                                )\n                            ]\n                        })\n                    ]\n                }\n            ]\n        });\n\n          // Генерация файла и скачивание\n        Packer.toBlob(doc).then(blob => {\n            saveAs(blob, 'jobtypes.docx');\n        });\n    };\n\n    //экспорт эксель\n    const handleExportEmployeesToExcel = () => {\n        // Формируем данные для Excel\n        const employeeData = employees.map(emp => ({\n            \"First Name\": emp.first_name || '',\n            \"Last Name\": emp.last_name || '',\n            \"Salary\": emp.salary?.toString() || '',\n            \"Job Type\": jobTypes.find(job => job.id === emp.job_type)?.name || 'Unknown Job Type',\n            \"Department\": departments.find(dept => dept.id === emp.department)?.name || 'Unknown Department',\n        }));\n    \n        // Создаем рабочий лист\n        const worksheet = utils.json_to_sheet(employeeData);\n    \n        // Создаем рабочую книгу\n        const workbook = utils.book_new();\n        utils.book_append_sheet(workbook, worksheet, \"Employees\");\n    \n        // Генерация и скачивание файла\n        writeFile(workbook, 'employees.xlsx');\n    };\n\n    const handleExportJobTypesToExcel = () => {\n        // Формируем данные для Excel\n        const jobTypeData = jobTypes.map(jobType => ({\n            \"Job Type Name\": jobType.name\n        }));\n    \n        // Создаем рабочий лист\n        const worksheet = utils.json_to_sheet(jobTypeData);\n    \n        // Создаем рабочую книгу\n        const workbook = utils.book_new();\n        utils.book_append_sheet(workbook, worksheet, \"Job Types\");\n    \n        // Генерация и скачивание файла\n        writeFile(workbook, 'jobtypes.xlsx');\n    };\n    \n\n    useEffect(() => {\n        // Запрос к API на Django для получения списка сотрудников\n        axios.get('http://localhost:8000/api/employees/')\n            .then(res => {\n                setEmployees(res.data);\n            })\n            .catch(err => {\n                console.error(err);\n            });\n\n        // Запрос к API для получения списка типов работы\n        axios.get('http://localhost:8000/api/job-types/')\n            .then(res => {\n                setJobTypes(res.data);\n            })\n            .catch(err => {\n                console.error(err);\n            });\n\n         // Получение данных отделов\n        axios.get('http://localhost:8000/api/departments/')\n            .then(res => {\n                setDepartments(res.data);\n            })\n            .catch(err => {\n                console.error(err);\n            });\n\n    }, []);\n\n    // Функция для удаления сотрудника\n    const handleDeleteEmployee = (id) => {\n        axios.delete(`http://localhost:8000/api/employees/${id}/`)\n            .then(() => {\n                setEmployees(employees.filter(employee => employee.id !== id));\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    };\n\n    // Функция для добавления нового сотрудника\n    const handleAddEmployee = (e) => {\n        e.preventDefault();\n    \n        if (!newEmployee.first_name || !newEmployee.last_name || !newEmployee.salary || !newEmployee.job_type) {\n            console.error('All fields are required');\n            return;\n        }\n    \n        axios.post('http://localhost:8000/api/employees/', newEmployee)\n            .then((res) => {\n                setEmployees([...employees, res.data]);\n                setNewEmployee({ first_name: '', last_name: '', salary: '', job_type: '', department: '' });\n                \n            })\n            .catch(err => {\n                console.error(err.response.data);\n                \n            });\n    };\n    \n\n    // Функция для добавления нового типа работы\n    const handleAddJobType = (e) => {\n        e.preventDefault();\n\n        axios.post('http://localhost:8000/api/job-types/', newJobType)\n            .then((res) => {\n                setJobTypes([...jobTypes, res.data]); // Обновляем список типов работы\n                setNewJobType({ name: '' }); // Очищаем поля ввода\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    };\n\n    // Функция для удаления типа работы\n    const handleDeleteJobType = (id) => {\n        axios.delete(`http://localhost:8000/api/job-types/${id}/`)\n            .then(() => {\n                setJobTypes(jobTypes.filter(jobType => jobType.id !== id));\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    };\n\n    const handleAddDepartment = (e) => {\n        e.preventDefault();\n        axios.post('http://localhost:8000/api/departments/', newDepartment)\n            .then((res) => {\n                setDepartments([...departments, res.data]); // Обновляем список отделов\n                setNewDepartment({ name: '' }); // Очищаем поля ввода\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    };\n    \n    const handleDeleteDepartment = (id) => {\n        axios.delete(`http://localhost:8000/api/departments/${id}/`)\n            .then(() => {\n                setDepartments(departments.filter(department => department.id !== id));\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    };\n\n    // Открытие модального окна для редактирования сотрудников\n    const handleEditEmployee = (id) => {\n        const employee = employees.find(emp => emp.id === id);\n        if (employee) {\n            setEmployeeToEdit(employee);\n            setEditedEmployee({\n                first_name: employee.first_name,\n                last_name: employee.last_name,\n                salary: employee.salary,\n                job_type: employee.job_type,\n                department: employee.department\n            });\n            setIsModalOpen(true);\n        }\n    };\n\n    // Закрытие модального окна\n    const closeModal = () => {\n        setIsModalOpen(false);\n        setEmployeeToEdit(null);\n    };\n\n    // Обновление данных сотрудника при изменении в модальной форме\n    const handleInputChange = (e) => {\n        const { name, value } = e.target;\n        setEditedEmployee({\n            ...editedEmployee,\n            [name]: value\n        });\n    };\n\n    // Сохранение изменений сотрудника\n    const handleSaveChanges = () => {\n        axios.put(`http://localhost:8000/api/employees/${employeeToEdit.id}/`, editedEmployee)\n            .then(() => {\n                // Обновляем список сотрудников\n                setEmployees(employees.map(emp => emp.id === employeeToEdit.id ? editedEmployee : emp));\n                closeModal();\n            })\n            .catch(err => {\n                console.error(err);\n            });\n    };\n\n    // Открытие модального окна для редактирования типа работы\n    const handleEditJobType = (id) => {\n        const jobType = jobTypes.find(jobType => jobType.id === id);\n        if (jobType) {\n            setEditedJobType(jobType); \n            setIsEditJobTypeModalOpen(true);\n        }\n    }; \n\n    // Закрытие модального окна для редактирования типа работы\n    const closeEditJobTypeModal = () => {\n        setIsEditJobTypeModalOpen(false); // Закрываем модальное окно\n        setEditedJobType({}); // Сбрасываем редактируемый тип работы\n    };\n\n    // Сохранение изменений типа работы\n    const handleEditJobTypeSubmit = (e) => {\n        e.preventDefault();\n\n        axios.put(`http://localhost:8000/api/job-types/${editedJobType.id}/`, {\n            name: editedJobType.name,\n        })\n        .then((response) => {\n            const updatedJobType = response.data; // Получаем обновленный тип работы из ответа сервера\n            setJobTypes((prevJobTypes) =>\n                prevJobTypes.map((jobType) =>\n                    jobType.id === updatedJobType.id ? updatedJobType : jobType\n                )\n            );\n\n            closeEditJobTypeModal(); // Закрытие модального окна\n        })\n        .catch((error) => {\n            console.error('Ошибка:', error);\n            alert('Произошла ошибка при обновлении типа работы: ' + (error.response?.data?.message || error.message));\n        });\n    };\n    \n\n    // Открытие модального окна для редактирования отдела\n    const handleEditDepartment = (id) => {\n        const department = departments.find(dep => dep.id === id);\n        if (department) {\n            setEditedDepartment(department);\n            setIsEditDepartmentModalOpen(true); // Открываем модальное окно\n        }\n    };\n\n    // Закрытие модального окна для редактирования отдела\n    const closeEditDepartmentModal = () => {\n        setIsEditDepartmentModalOpen(false); // Закрываем модальное окно\n        setEditedDepartment({}); // Сбрасываем редактируемый отдел\n    };\n\n    // Обновление отдела\n    const handleEditDepartmentSubmit = (e) => {\n        e.preventDefault();\n\n        axios.put(`http://localhost:8000/api/departments/${editedDepartment.id}/`, {\n            name: editedDepartment.name,\n        })\n        .then((response) => {\n            const updatedDepartment = response.data; // Получаем обновленный отдел из ответа сервера\n            setDepartments((prevDepartments) =>\n                prevDepartments.map((dep) =>\n                    dep.id === updatedDepartment.id ? updatedDepartment : dep\n                )\n            );\n\n            closeEditDepartmentModal(); // Закрытие модального окна\n        })\n        .catch((error) => {\n            console.error('Ошибка:', error);\n            alert('Произошла ошибка при обновлении отдела: ' + (error.response?.data?.message || error.message));\n        });\n    };\n\n    //скролл вверх\n    const handleScrollToTop = () => {\n        window.scrollTo({\n            top: 0,\n            behavior: 'smooth' // Плавная прокрутка\n        });\n    };\n        \n    return (\n        <div>\n            {/* Хедер с навигацией */}\n            <header className=\"header\">\n                <div className=\"cube\">\n                    <div className=\"side front\"></div>\n                    <div className=\"side back\"></div>\n                    <div className=\"side left\"></div>\n                    <div className=\"side right\"></div>\n                    <div className=\"side top\"></div>\n                    <div className=\"side bottom\"></div>\n                </div>\n                <h1>Employee Management System</h1>\n                <nav>\n                    <ul>\n                        <li><a href=\"#add-employee\">Сотрудники</a></li>\n                        <li><a href=\"#add-job-type\">Тип Работы</a></li>\n                        <li><a href=\"#add-department\">Отделы</a></li>\n                    </ul>\n                </nav>\n            </header>\n\n            <main>\n                {/* Форма для добавления нового сотрудника */}\n                <form onSubmit={handleAddEmployee} className=\"employee-form\" id=\"add-employee\">\n\n                    <h2>Add New Employee</h2>\n\n                    <div className=\"input-field-container\">\n                        <input\n                            type=\"text\"\n                            className=\"input-field\"\n                            placeholder=\" \"\n                            value={newEmployee.first_name}\n                            onChange={(e) => setNewEmployee({ ...newEmployee, first_name: e.target.value })}\n                            required\n                            id=\"first-name\"\n                        />\n                        <label className=\"label\" htmlFor=\"first-name\">First Name</label>\n                    </div>\n\n                    <div className=\"input-field-container\">\n                        <input\n                            type=\"text\"\n                            className=\"input-field\"\n                            placeholder=\" \"\n                            value={newEmployee.last_name}\n                            onChange={(e) => setNewEmployee({ ...newEmployee, last_name: e.target.value })}\n                            required\n                            id=\"last-name\"\n                        />\n                        <label className=\"label\" htmlFor=\"last-name\">Last Name</label>\n                    </div>\n\n                    <div className=\"input-field-container\">\n                        <input\n                            type=\"number\"\n                            className=\"input-field\"\n                            placeholder=\" \"\n                            value={newEmployee.salary}\n                            onChange={(e) => setNewEmployee({ ...newEmployee, salary: e.target.value })}\n                            required\n                            id=\"salary\"\n                        />\n                        <label className=\"label\" htmlFor=\"salary\">Salary</label>\n                    </div>\n\n                    <div className=\"input-field-container\">\n                        <select\n                            className=\"select-field\"\n                            value={newEmployee.job_type}\n                            onChange={(e) => setNewEmployee({ ...newEmployee, job_type: e.target.value })}\n                            required\n                        >\n                            <option value=\"\" disabled hidden>Select Job Type</option>\n                            {jobTypes.map(jobType => (\n                                <option key={jobType.id} value={jobType.id}>{jobType.name}</option>\n                            ))}\n                        </select>\n                        <label className=\"label\" htmlFor=\"job-type\">Job Type</label>\n                    </div>\n\n                    <div className=\"input-field-container\">\n                        <select\n                            className=\"select-field\"\n                            value={newEmployee.department}\n                            onChange={(e) => setNewEmployee({ ...newEmployee, department: e.target.value })}\n                            required\n                        >\n                            <option value=\"\" disabled hidden>Select Department</option>\n                            {departments.map(department => (\n                                <option key={department.id} value={department.id}>{department.name}</option>\n                            ))}\n                        </select>\n                        <label className=\"label\" htmlFor=\"department\">Department</label>\n                    </div>\n\n                    <button type=\"submit\" className=\"export-button\">Add Employee</button>\n                </form>\n                \n                {isModalOpen && (\n                    <div className=\"modal\">\n                        <div className=\"modal-content\">\n                            <h2>Edit Employee</h2>\n                            <form onSubmit={handleSaveChanges}>\n                                <input\n                                    type=\"text\"\n                                    name=\"first_name\"\n                                    placeholder=\"First Name\"\n                                    value={editedEmployee.first_name}\n                                    onChange={handleInputChange}\n                                    required\n                                />\n                                <input\n                                    type=\"text\"\n                                    name=\"last_name\"\n                                    placeholder=\"Last Name\"\n                                    value={editedEmployee.last_name}\n                                    onChange={handleInputChange}\n                                    required\n                                />\n                                <input\n                                    type=\"number\"\n                                    name=\"salary\"\n                                    placeholder=\"Salary\"\n                                    value={editedEmployee.salary}\n                                    onChange={handleInputChange}\n                                    required\n                                />\n                                <select\n                                    name=\"job_type\"\n                                    value={editedEmployee.job_type}\n                                    onChange={handleInputChange}\n                                    required\n                                >\n                                    <option value=\"\">Select Job Type</option>\n                                    {jobTypes.map(jobType => (\n                                        <option key={jobType.id} value={jobType.id}>\n                                            {jobType.name}\n                                        </option>\n                                    ))}\n                                </select>\n                                <select\n                                    name=\"department\"\n                                    value={editedEmployee.department}\n                                    onChange={handleInputChange}\n                                    required\n                                >\n                                    <option value=\"\">Select Department</option>\n                                    {departments.map(dept => (\n                                        <option key={dept.id} value={dept.id}>\n                                            {dept.name}\n                                        </option>\n                                    ))}\n                                </select>\n                                <button type=\"submit\">Save Changes</button>\n                                <button type=\"button\" onClick={closeModal}>Cancel</button>\n                            </form>\n                        </div>\n                    </div>\n                )}\n\n                {/* Таблица сотрудников */}\n                <table className=\"styled-table\">\n                    <thead>\n                        <tr>\n                            <th>First Name</th>\n                            <th>Last Name</th>\n                            <th>Salary</th>\n                            <th>Job Type</th>\n                            <th>Department</th> {/* Новый столбец для отдела */}\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {employees.map(employee => (\n                            <tr key={employee.id}>\n                                <td>{employee.first_name}</td>\n                                <td>{employee.last_name}</td>\n                                <td>{employee.salary}</td>\n                                <td>\n                                    {jobTypes.find(job => job.id === employee.job_type)?.name || 'Unknown Job Type'}\n                                </td>\n                                <td>\n                                    {departments.find(dept => dept.id === employee.department)?.name || 'Unknown Department'}\n                                </td>\n                                <td>\n                                    <button\n                                        className=\"edit-button\"\n                                        onClick={() => handleEditEmployee(employee.id)}> {/* Добавлено для редактирования */}\n                                        <span role=\"img\" aria-label=\"Редактировать\">✏️</span>\n                                    </button>\n                                    <button\n                                        className=\"delete-button\"\n                                        onClick={() => handleDeleteEmployee(employee.id)}>\n                                        <span role=\"img\" aria-label=\"Удалить\">🗑️</span>\n                                    </button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n\n\n                {/* Форма для добавления нового типа работы */}\n                <form onSubmit={handleAddJobType} className=\"job-type-form\" id=\"add-job-type\">\n                    <h2>Add New Job Type</h2>\n\n                    <div className=\"input-field-container\">\n                        <input\n                            type=\"text\"\n                            className=\"input-field\" // Добавьте класс для стилей\n                            placeholder=\" \" // Оставьте пробел для использования метки\n                            value={newJobType.name}\n                            onChange={(e) => setNewJobType({ name: e.target.value })}\n                            required\n                            id=\"job-type-name\" // Уникальный ID для метки\n                        />\n                        <label className=\"label\" htmlFor=\"job-type-name\">Job Type Name</label> {/* Добавьте метку */}\n\n                        <button className=\"export-button\" type=\"submit\">Add Job Type</button>\n                    </div>\n                    \n                </form>\n\n\n                {/* Модальное окно для редактирования типа работы */}\n                {isEditJobTypeModalOpen && (\n                    <div className=\"modal\" >\n                        <form onSubmit={handleEditJobTypeSubmit}>\n                            <h2>Редактировать тип работы</h2>\n\n                            <div className=\"input-field-container\">\n                                <input \n                                    type=\"text\" \n                                    className=\"input-field\"\n                                    value={editedJobType.name || ''} \n                                    onChange={(e) => setEditedJobType({ ...editedJobType, name: e.target.value })} \n                                    placeholder=\"Имя типа работы\" \n                                />\n                                <button class=\"export-button\" type=\"submit\">Сохранить изменения</button>\n                                <button class=\"export-button\" type=\"button\" onClick={closeEditJobTypeModal}>Закрыть</button>\n                            </div>\n                        </form>\n                    </div>\n                )}\n\n                {/* Таблица типов работ */}\n                <table className=\"styled-table\">\n                    <thead>\n                        <tr>\n                            <th>Job Type</th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {jobTypes.map(jobType => (\n                            <tr key={jobType.id}>\n                                <td>{jobType.name}</td>\n                                <td>\n                                    <button\n                                        className=\"edit-button\"\n                                        onClick={() => handleEditJobType(jobType.id)}>\n                                        <span role=\"img\" aria-label=\"Редактировать\">✏️</span>\n                                    </button>\n                                    <button\n                                        className=\"delete-button\"\n                                        onClick={() => handleDeleteJobType(jobType.id)}>\n                                        <span role=\"img\" aria-label=\"Удалить\">🗑️</span>\n                                    </button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n\n                <form onSubmit={handleAddDepartment} className=\"department-form\" id=\"add-department\">\n                    <h2>Add New Department</h2>\n\n                    <div className=\"input-field-container\">\n                        <input\n                            type=\"text\"\n                            className=\"input-field\"\n                            placeholder=\" \"\n                            value={newDepartment.name}\n                            onChange={(e) => setNewDepartment({ name: e.target.value })}\n                            required\n                        />\n                        <label className=\"label\" htmlFor=\"job-type-name\">Department Name</label>\n\n                        <button class=\"export-button\" type=\"submit\">Add Department</button>\n                    </div>\n                </form>\n\n                 {/* Модальное окно для редактирования отдела */}\n                {isEditDepartmentModalOpen && (\n                    <div className=\"modal\">\n                        <form onSubmit={handleEditDepartmentSubmit}>\n                            <h2>Редактировать отдел</h2>\n\n                            <div className=\"input-field-container\">\n                                <input \n                                    type=\"text\" \n                                    className=\"input-field\"\n                                    value={editedDepartment.name} \n                                    onChange={(e) => setEditedDepartment({ ...editedDepartment, name: e.target.value })} \n                                    placeholder=\"Имя отдела\" \n                                />\n                                <button class=\"export-button\" type=\"submit\">Сохранить изменения</button>\n                                <button class=\"export-button\" type=\"button\" onClick={closeEditDepartmentModal}>Закрыть</button>\n                            </div>\n                        </form>\n                    </div>\n                )}\n\n                {/* Таблица отдела работ */}\n                <table className=\"styled-table\">\n                    <thead>\n                        <tr>\n                            <th>Department Name</th>\n                            <th>Actions</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {departments.map(department => (\n                            <tr key={department.id}>\n                                <td>{department.name}</td>\n                                <td>\n                                    <button\n                                        className=\"edit-button\"\n                                        onClick={() => handleEditDepartment(department.id)}> {/* Добавлено для редактирования */}\n                                        <span role=\"img\" aria-label=\"Редактировать\">✏️</span>\n                                    </button>\n                                    <button\n                                        className=\"delete-button\"\n                                        onClick={() => handleDeleteDepartment(department.id)}>\n                                        <span role=\"img\" aria-label=\"Удалить\">🗑️</span>\n                                    </button>\n                                </td>\n                            </tr>\n                        ))}\n                    </tbody>\n                </table>\n\n\n                <div className=\"export-buttons\">\n                    <button className=\"export-button\" onClick={handleExportEmployeesToExcel}>\n                        Export Employees to Excel\n                    </button>\n\n                    <button className=\"export-button\" onClick={handleExportJobTypesToExcel}>\n                        Export Job Types to Excel\n                    </button>\n\n                    <button className=\"export-button\" onClick={handleExportEmployees}>Export Employees to Text File</button>\n                    <button className=\"export-button\" onClick={handleExportJobTypes}>Export Job Types to Text File</button>\n                </div>\n            </main>\n\n            <button className=\"scroll-to-top\" onClick={handleScrollToTop}>\n                <span role=\"img\" aria-label=\"вверх\">⬆️</span>\n            </button>\n\n            <FilterComp employees={employees} jobTypes={jobTypes} departments={departments} />\n\n            <div>\n                {/* экспорт в файл */}\n                <ExportToWord\n                    selectedEmployees={selectedEmployees}\n                    vacationStartDates={vacationStartDates}\n                    vacationEndDates={vacationEndDates}\n                    employees={employees}\n                    handleSelectEmployee={handleSelectEmployee} // Передайте функции для обработки выбора\n                    handleStartDateChange={handleStartDateChange}\n                    handleEndDateChange={handleEndDateChange}\n                />\n            </div>\n\n            {/* Футер */}\n            <footer className=\"footer\">\n                <p>© 2024 авторский проект Employee Management System</p>\n            </footer>\n        </div>\n    );\n}\n\nexport default EmployeeList;\n","import React from 'react';\nimport './App.css';\nimport EmployeeList from './components/EmployeeList';\nimport FilterComp from './components/FilterComp';\nimport ExportToWord from './components/ExportToWord';\n\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <EmployeeList />\n                <FilterComp />\n                <ExportToWord />\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\nreportWebVitals();\n"],"sourceRoot":""}